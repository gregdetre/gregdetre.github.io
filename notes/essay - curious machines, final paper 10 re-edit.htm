<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List
href="./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/filelist.xml">
<link rel=Edit-Time-Data
href="./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Title</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Greg Detre</o:Author>
  <o:LastAuthor>Greg Detre</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:Created>2003-07-02T00:56:00Z</o:Created>
  <o:LastSaved>2003-07-02T00:56:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>10082</o:Words>
  <o:Characters>57469</o:Characters>
  <o:Company>-</o:Company>
  <o:Lines>478</o:Lines>
  <o:Paragraphs>114</o:Paragraphs>
  <o:CharactersWithSpaces>70575</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DrawingGridHorizontalSpacing>4.5 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>12.25 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:Compatibility>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Times;
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:536902279 -2147483648 8 0 511 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"Book Antiqua";
	panose-1:2 4 6 2 5 3 5 3 3 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:553679495 -2147483648 8 0 66047 0;}
@font-face
	{font-family:"Arial Unicode MS";
	mso-font-alt:Tahoma;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129023 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129023 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	text-align:center;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:20.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-font-kerning:14.0pt;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-next:Normal;
	margin-top:16.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:18.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
h3
	{mso-style-next:Normal;
	margin-top:16.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	tab-stops:right 451.45pt;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
h4
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:justify;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin-top:15.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
h6
	{mso-style-parent:"Heading 5";
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:6;
	font-size:10.0pt;
	mso-bidi-font-size:11.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:olive;
	font-weight:bold;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	tab-stops:.75in right 451.45pt;
	font-size:11.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-variant:small-caps;
	mso-font-kerning:14.0pt;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-parent:"Heading 2";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:10.1pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	tab-stops:right 451.3pt;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-parent:"TOC 2";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:20.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	tab-stops:right 451.45pt;
	font-size:9.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:teal;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-update:auto;
	mso-style-parent:"TOC 3";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:35.7pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	tab-stops:right 451.45pt;
	font-size:7.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:maroon;
	mso-bidi-font-weight:bold;}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:96.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	tab-stops:center 239.75pt right 6.65in;
	font-size:11.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	tab-stops:center 207.65pt right 415.3pt;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
span.MsoFootnoteReference
	{vertical-align:super;}
span.MsoEndnoteReference
	{vertical-align:super;}
p.MsoEndnoteText, li.MsoEndnoteText, div.MsoEndnoteText
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:Times;
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-US;}
p.MsoDate, li.MsoDate, div.MsoDate
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:right;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	background:navy;
	font-size:10.0pt;
	font-family:Tahoma;
	mso-fareast-font-family:"Times New Roman";}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Arial Unicode MS";
	mso-ansi-language:EN-US;}
p
	{margin-right:0in;
	mso-margin-top-alt:auto;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Arial Unicode MS";}
p.Section, li.Section, div.Section
	{mso-style-name:Section;
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Heading0, li.Heading0, div.Heading0
	{mso-style-name:"Heading 0";
	mso-style-parent:"Heading 1";
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	text-align:center;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	border:none;
	mso-border-alt:solid windowtext .5pt;
	padding:0in;
	mso-padding-alt:1.0pt 4.0pt 1.0pt 4.0pt;
	font-size:16.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Book Antiqua";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-variant:small-caps;
	color:purple;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
span.EBTimes14
	{mso-style-name:EBTimes14;
	mso-ansi-font-size:14.0pt;
	mso-bidi-font-size:14.0pt;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:.95in .95in .95in .95in;
	mso-header-margin:.4in;
	mso-footer-margin:.5in;
	mso-title-page:yes;
	mso-header:url("./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/header.htm") h1;
	mso-footer:url("./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
@page Section2
	{size:595.3pt 841.9pt;
	margin:68.05pt 68.05pt 68.05pt 68.05pt;
	mso-header-margin:.4in;
	mso-footer-margin:.5in;
	mso-columns:2 even .5in;
	mso-header:url("./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/header.htm") h1;
	mso-footer:url("./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/header.htm") f1;
	mso-paper-source:0;}
div.Section2
	{page:Section2;}
@page Section3
	{size:595.3pt 841.9pt;
	margin:68.05pt 68.05pt 68.05pt 68.05pt;
	mso-header-margin:.4in;
	mso-footer-margin:.5in;
	mso-header:url("./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/header.htm") h1;
	mso-footer:url("./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/header.htm") f1;
	mso-paper-source:0;}
div.Section3
	{page:Section3;}
 /* List Definitions */
@list l0
	{mso-list-id:266819058;
	mso-list-type:hybrid;
	mso-list-template-ids:-855634994 -1809302742 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	mso-ansi-font-size:9.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:282881615;
	mso-list-type:hybrid;
	mso-list-template-ids:1092128718 2000858780 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	mso-ansi-font-size:9.0pt;
	font-family:Symbol;}
@list l2
	{mso-list-id:437412701;
	mso-list-type:hybrid;
	mso-list-template-ids:1240367548 1085728756 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l2:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	mso-ansi-font-size:9.0pt;
	font-family:Symbol;}
@list l3
	{mso-list-id:560167131;
	mso-list-type:hybrid;
	mso-list-template-ids:2097445726 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l3:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l4
	{mso-list-id:770008093;
	mso-list-type:hybrid;
	mso-list-template-ids:1028157496 606101762 -664086900 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	mso-ansi-font-size:9.0pt;
	font-family:Symbol;}
@list l4:level2
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.6pt;
	mso-level-number-position:left;
	margin-left:.6pt;
	text-indent:-.25in;
	mso-ansi-font-size:9.0pt;
	font-family:Symbol;}
@list l5
	{mso-list-id:818615201;
	mso-list-type:hybrid;
	mso-list-template-ids:-1807070400 1042479022 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	mso-ansi-font-size:9.0pt;
	font-family:Symbol;}
@list l6
	{mso-list-id:827984338;
	mso-list-type:hybrid;
	mso-list-template-ids:-774856496 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l6:level1
	{mso-level-tab-stop:71.7pt;
	mso-level-number-position:left;
	margin-left:71.7pt;
	text-indent:-.25in;}
@list l7
	{mso-list-id:943459362;
	mso-list-type:hybrid;
	mso-list-template-ids:1397011112 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l7:level1
	{mso-level-tab-stop:35.85pt;
	mso-level-number-position:left;
	margin-left:35.85pt;
	text-indent:-.25in;}
@list l8
	{mso-list-id:973020672;
	mso-list-type:hybrid;
	mso-list-template-ids:1101700808 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l8:level1
	{mso-level-tab-stop:35.85pt;
	mso-level-number-position:left;
	margin-left:35.85pt;
	text-indent:-.25in;}
@list l9
	{mso-list-id:1177037864;
	mso-list-type:hybrid;
	mso-list-template-ids:-1973892744 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l9:level1
	{mso-level-tab-stop:35.85pt;
	mso-level-number-position:left;
	margin-left:35.85pt;
	text-indent:-.25in;}
@list l10
	{mso-list-id:1321612457;
	mso-list-type:hybrid;
	mso-list-template-ids:-796127392 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l10:level1
	{mso-level-tab-stop:35.85pt;
	mso-level-number-position:left;
	margin-left:35.85pt;
	text-indent:-.25in;}
@list l11
	{mso-list-id:1403016901;
	mso-list-type:hybrid;
	mso-list-template-ids:-22232012 67698711 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l11:level1
	{mso-level-number-format:alpha-lower;
	mso-level-text:"%1\)";
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l12
	{mso-list-id:1510944314;
	mso-list-type:hybrid;
	mso-list-template-ids:611106308 67698691 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l12:level1
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:71.55pt;
	mso-level-number-position:left;
	margin-left:71.55pt;
	text-indent:-.25in;
	font-family:"Courier New";
	mso-bidi-font-family:"Times New Roman";}
@list l13
	{mso-list-id:1555966450;
	mso-list-type:hybrid;
	mso-list-template-ids:-1454466184 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l13:level1
	{mso-level-tab-stop:35.85pt;
	mso-level-number-position:left;
	margin-left:35.85pt;
	text-indent:-.25in;}
@list l14
	{mso-list-id:1568488788;
	mso-list-type:hybrid;
	mso-list-template-ids:611106308 1306136220 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l14:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:53.7pt;
	mso-level-number-position:left;
	margin-left:53.7pt;
	text-indent:-.25in;
	mso-ansi-font-size:9.0pt;
	font-family:Symbol;}
@list l15
	{mso-list-id:1572999967;
	mso-list-type:hybrid;
	mso-list-template-ids:2012018422 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l15:level1
	{mso-level-tab-stop:35.85pt;
	mso-level-number-position:left;
	margin-left:35.85pt;
	text-indent:-.25in;}
@list l16
	{mso-list-id:1577667490;
	mso-list-type:hybrid;
	mso-list-template-ids:2019882044 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l16:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l17
	{mso-list-id:1626235972;
	mso-list-type:hybrid;
	mso-list-template-ids:-955077542 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l17:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l17:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l18
	{mso-list-id:1746143482;
	mso-list-type:simple;
	mso-list-template-ids:-719658964;}
@list l18:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l19
	{mso-list-id:1776830643;
	mso-list-type:hybrid;
	mso-list-template-ids:-1586600182 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l19:level1
	{mso-level-tab-stop:53.85pt;
	mso-level-number-position:left;
	margin-left:53.85pt;
	text-indent:-.25in;}
@list l20
	{mso-list-id:1920092753;
	mso-list-type:hybrid;
	mso-list-template-ids:-1556453428 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l20:level1
	{mso-level-tab-stop:35.85pt;
	mso-level-number-position:left;
	margin-left:35.85pt;
	text-indent:-.25in;}
@list l21
	{mso-list-id:2097167177;
	mso-list-type:hybrid;
	mso-list-template-ids:1261739582 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l21:level1
	{mso-level-tab-stop:71.7pt;
	mso-level-number-position:left;
	margin-left:71.7pt;
	text-indent:-.25in;}
@list l21:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:107.7pt;
	mso-level-number-position:left;
	margin-left:107.7pt;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-GB link=blue vlink=purple style='tab-interval:17.85pt'>

<div class=Section1>

<h1><a name="_Toc40559195">Learning by analogy</a> � making Copycat curious</h1>

<p class=MsoNormal align=center style='text-align:center'><b>Greg Detre<o:p></o:p></b></p>

<p class=MsoNormal align=center style='margin-top:0in;text-align:center'>Harvard
University, Cambridge, MA</p>

<p class=MsoNormal align=center style='margin-top:0in;text-align:center'>email:
<u>greg@gregdetre.co.uk</u></p>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><a name="_Toc40559197"><b><span lang=EN-US style='font-size:
9.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-US'>Abstract</span></b></a><span
style='mso-bookmark:_Toc40559197'></span><span lang=EN-US style='font-size:
9.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-US'>: The aim of this
paper is to consider a future implementation of a curious machine that learns
through analogy-making. I will describe what I mean by curiosity, and consider
how the state of the art in computational analogy-making provides a good
starting-point for the endeavour by considering how one particular such
architecture, Copycat, might be extended. I will focus on how a future system
might begin to self-organise and learn, reducing the reliance </span><span
style='font-size:9.0pt;mso-bidi-font-size:10.0pt'>on human hand-coding of
parameters, and making steps towards becoming genuinely domain-general, and how
such a system could be considered to be being curious.<o:p></o:p></span></p>

<p class=MsoNormal><b><span style='font-size:9.0pt;mso-bidi-font-size:10.0pt'>Keywords</span></b><span
style='font-size:9.0pt;mso-bidi-font-size:10.0pt'>: curiosity, analogy-making,
learning, concepts, case-based reasoning, derivational analogies<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

<span style='font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:auto;
mso-break-type:section-break'>
</span>

<div class=Section2>

<p class=MsoNormal><a name="_Toc40559199"><i>A year spent in artificial
intelligence is enough to make one believe in God</i></a><span
style='mso-bookmark:_Toc40559199'><i><span lang=EN-US style='mso-ansi-language:
EN-US'> � Anon.<o:p></o:p></span></i></span></p>

<h2><span style='mso-bookmark:_Toc40559199'>Introduction</span></h2>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559199'>This paper was
originally written for a seminar class at the MIT Media Lab, entitled �Curious
machines�. The aim was to explore what curiosity is, its role in intelligence
and how curiosity might be implemented in future AI systems, asking questions
like �How can we build machines that are as curious learners as natural
systems? How can we build systems that have a deeper understanding of the
learning process beyond turning the statistical crank of a learning algorithm?�
� see http://courses.media.mit.edu/2003spring/mas963.</span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559199'>I�m going to start
by outlining some of the features that a recent discussion highlighted as being
characteristics of curious behaviour, before proposing a pithy and restricted
characterisation of what it is to be curious that will guide the discussion in
the rest of the paper. The intention is to discuss what would be necessary to
make Hofstadter and Mitchell�s Copycat analogy-making model be a curious
learner. </span></p>

<h3><span style='mso-bookmark:_Toc40559199'><span lang=EN-US style='mso-ansi-language:
EN-US'>Curiosity</span></span><span lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></h3>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>Being
curious is about seeking knowledge that you don�t even know for sure that
you�ll ever need</span>. Curiosity in its fullest sense presumably requires a
learning system and cognitive architecture complex enough to subserve
goal-directed and flexible behaviour, recognition of novelty, and some degree
of (self-)evaluation. Being curious is proactive and explorative, rather than a
reaction to immediate need. The more complex and diverse the goals, behaviours
and representations, the more complex the curiosity manifested. There can be
different types of curiosity, triggered under different circumstances, suited
to different domains, goals or learning styles. It also seems intuitively
unlikely that curiosity has a unitary substrate, but this is possibly
contentious and tangential to the points that I want to make next, so I won�t
discuss it.</p>

<p class=MsoNormal>In its barest form, a curious machine is one that <i>interrogates
its environment</i>. �Interrogation� has the requisite sense of a directed
enquiry about things that you want to know from something/someone that has the
answers, out of which an internal understanding is built. Interrogations are
about things that you don't know about now, and don't necessarily need to know,
but may well come in useful in the grand scheme of things. There's also a sense
of a dialogue, in which you ask questions, narrow down the domain of enquiry,
realise where you�re ignorant, ask more questions about the new things you
don't understand, and accommodate this new knowledge.</p>

<p class=MsoNormal>I hope that this will prove an illustrative rather than
misleading way of starting to think about the business of being curious. It
prompts certain observations. Importantly, you need to know some things already
in order to know what to ask and to make sense of the answers. Indeed, what you
know already will make a big difference to the kinds of questions it occurs to
you to frame, and the way you interpret the answers. The order in which you are
told things can drastically affect how easy it is to draw conclusions from
them. It helps you and your interlocutor gauge your understanding to be tested.
If you ask the right questions, you can draw conclusions that may have general applicability
very quickly. A popular way of answering a question is to provide examples and
counter-examples. Examples may make you see things in a new light, and
counter-examples help you map out the boundaries within which new knowledge
applies. Figuring out which questions to ask, especially figuring out when
something crucial is missing from your understanding, is hard but important.
For this reason, an unexpected answer can be very instructive. If you find it
difficult to understand something, good teachers will explain it to you by
saying it in another way, or showing how it�s similar (or different) to
something you already understand, or composed out of other things. You need to
know when to stop asking questions as well as when more questions are needed. I
have framed this idea of a question-and-answer interrogation in a very
linguistic light, but it needn�t be at all.<span style='color:blue'><o:p></o:p></span></p>

<h3><a name="_Toc40559200"><span lang=EN-US style='mso-ansi-language:EN-US'>Analogy-making</span></a><span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></h3>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>There are
lots of ways to think about things and to learn to deal with new problems and
concepts. Minsky [forthcoming, chapter 7] details a number of them, of which
I�ve reproduced a modified sample:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>breaking it down into smaller parts <o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>solving a simplified version, then generalising, or just dealing with
the extra complexities and exceptions one by one<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>seeing how it�s similar to something you already know about, or
reformulating the problem in a different domain<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>describing it in a more abstract way (e.g. formal logic)<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>meta-reflection � considering what makes a problem hard and where you�re
going wrong <o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>considering whether the problem is really worth solving at all<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>extensively searching through possibilities<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span lang=EN-US style='mso-ansi-language:
EN-US'>imagining how someone you respect would tackle the problem<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>If we could
build a system that was able to do all of these things flexibly and in
different domains, we�d be well on our way towards a very healthy IPO. My focus
here will be on the top two-thirds of this list, which I consider to fall
loosely under the general idea of �learning by analogy�. This very general
suite of approaches has been termed computational analogy-making [French],
case-based reasoning [Leake], remembering and adapting </span>[Kolodner<span
lang=EN-US style='mso-ansi-language:EN-US'>], high-level perception [Chalmers,
French and Hofstadter], and structure mapping theory [Gentner], amongst other
names.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>I consider
learning by analogy to be amongst the most central and powerful
representational and learning tactics we employ. In a perverse way, this is
evidenced by the effortlessness and invisibility of the processes that see
these similarities and analogies. W</span>e constantly think of concepts in
terms of other concepts, ignoring what is irrelevant to the comparison,
subconsciously but effortlessly alighting on what is salient. We jump up and
down levels, into different modalities and across mental realms. Human
language�s concise expressiveness rests in part on words being reused for new
purposes, enriching their associations and coopting their �inferential
machinery� [Minsky, Jokes and the cognitive unconscious]. This has been noted
before, most eloquently by Hofstadter [1979, 1995; also quoted in Marshall, 1999].</p>

<h5>Higher-level perception and Structure Mapping Theory</h5>

<p class=MsoNormal>I intend to take Hofstadter and the FARG�s implementations
as my starting point for discussion of a future implementation of a curious
machine that learns through analogy-making, but before going any further, we
need to briefly survey the main debate in the computational analogy-making
literature, which is best characterised by a comparison between the �Structure
Mapping Theory� and �Higher Level Perception� camps [French, 2002].</p>

<p class=MsoNormal>According to SMT, an analogy is an �alignment of relational
structure� [Gentner &amp; Markman, 1997]. Here, the relations are the internal
links that determine the composition and arrangement of the structure, which
are contrasted with the �attributes� and �object descriptions� which determine
�mere-appearance matches�. Morrison &amp; Dietrich [1995] consider that Gentner
et al.�s aim is to present a model of the <i>comprehension</i> (rather than the
discovery) of analogy, where for a given structure, the system is able to
retrieve a stored match for which the mapping of relations is closest. Their
implementation, SME,<span style="mso-spacerun: yes">� </span>starts by seeing
many local matches out of which a consistent large-scale structure coalesces,
and appears to mirror certain salient experimental results with human subjects.</p>

<p class=MsoNormal>In contrast, Hofstadter and the FARG [Hofstadter, 1995] want
to cast analogy-making as playing a much more central and less specialised role
� �analogy-making is going on constantly in the background of the mind, helping
to shape our perceptions of everyday situations. In our view, <i>analogy is not
separate from perception: analogy-making itself is a perceptual process</i>�
[Chalmers, French and Hofstadter, 1991].</p>

<p class=MsoNormal>This needs a little explaining. The central point is that
the process of building up a compound representation of a situation or scenario
cannot be independent of the process of seeing a mapping between scenarios.
Both of these processes are intertwined as �high-level perception�. High-level
perception begins at that level of processing where concepts begin to play an
important role. This is pretty nebulous, but that�s fine. We can see concepts
as being abstract or concrete, simple or complex � any aggregation, processing
or filtering of raw sensory data can be seen as conceptualising.</p>

<p class=MsoNormal>The two problems in high-level perception are the problems
of relevance and of organisation:</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.85pt;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l8 level1 lfo10;
tab-stops:list 35.85pt'><![if !supportLists]>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]><i>relevance</i> � how do you determine what�s salient within
the morass of low-level data, and pick it out to pass on to higher levels of
processing?</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.85pt;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l8 level1 lfo10;
tab-stops:list 35.85pt'><![if !supportLists]>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]><i>organisation</i> � how do you organise all of that
(multi-modal) data together, i.e. how do you determine what to clump together
and what�s related to what?</p>

<p class=MsoNormal>These two problems are critical for SMT, since if the wrong
aspects of the perceptual data are chosen, or if they are organised poorly, no
analogies will ever be found. Yet this is out of SME�s control, because it
artificially separates the processes of human hand-coding of perception and its
own mapping. The same criticism Hofstadter made of Bacon [Langley et al., 1987]
could be made of SME, namely that it �was fed precisely the data required to
derive the [Kepler�s] law� [Hofstadter, 1995].<span style='color:blue'><o:p></o:p></span></p>

<p class=MsoNormal>In other words, analogy-making requires representations to
be built dynamically, extracting, organising and <i>re</i><i style='mso-bidi-font-style:
normal'>organising</i> what�s salient about the current situation based on the
current context, goals, beliefs, and at the same time as trying to perform
tentative mappings with past situations and knowledge. To <i>comprehend</i> an
analogy is to <i>discover</i> it � you can�t do the former in any rich,
flexible or meaningful way without doing the latter.</p>

<h5><span lang=EN-US style='mso-ansi-language:EN-US'>Copycat<o:p></o:p></span></h5>

<p class=MsoNormal>Copycat is intended to illustrate how the various strata of
such a view of analogy-making as high-level perception could operate and
interact, involving:</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l4 level1 lfo25;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>the gradual building-up of representations</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l4 level1 lfo25;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>the role of top-down and contextual influences</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l4 level1 lfo25;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>the integration of perception and mapping</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l4 level1 lfo25;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>the exploration of many possible paths towards a
representation</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l4 level1 lfo25;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>the radical restructuring of perceptions, when
necessary</p>

<p class=MsoNormal>Copycat considers analogies like the following:</p>

<p class=MsoNormal align=center style='margin-left:17.85pt;text-align:center'><i>abc
</i><span style="mso-spacerun: yes">�</span>:<span style="mso-spacerun: yes">�
</span><i>abd<span style="mso-spacerun: yes">� </span>::<span
style="mso-spacerun: yes">� </span>ijkk </i><span style="mso-spacerun:
yes">�</span>:<span style="mso-spacerun: yes">� </span><i>?<o:p></o:p></i></p>

<p class=MsoNormal>Most people would prefer <i>ijll</i>, but would recognise
the validity of <i>ijkl</i>, <i>ijkd</i>, <i>ijdd</i> or <i>abd</i>, to name
just a few. Copycat�s architecture is designed to allow top-down and bottom-up
influences to interact, constraining a search<a style='mso-footnote-id:ftn1'
href="#_ftn1" name="_ftnref1" title=""><span class=MsoFootnoteReference><span
style='mso-special-character:footnote'><![if !supportFootnotes]>[1]<![endif]></span></span></a>
through the space of possible mappings between letter-strings, and so producing
a mapping to a new string, as well as providing a rating of the system's
�happiness� with its solution. This could be seen in three main (concurrent)
tasks:</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l3 level1 lfo24;
tab-stops:list .25in'><![if !supportLists]>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>build a representations of the three starting strings</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l3 level1 lfo24;
tab-stops:list .25in'><![if !supportLists]>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>describe how to map from the source to target strings</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l3 level1 lfo24;
tab-stops:list .25in'><![if !supportLists]>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>apply the same transformation to the third string</p>

<p class=MsoNormal>There are a number of things about the Copycat architecture
that are special or interesting. It�s split into three parts:</p>

<p class=MsoNormal><a name="OLE_LINK1"><i>Slipnet<o:p></o:p></i></a></p>

<p class=MsoNormal><span style='mso-bookmark:OLE_LINK1'>This is the high-level,
long-term conceptual memory of Copycat (<i>see Fig. 1</i>), represented as a
semantic network. It contains concepts like �successorship�, �rightmost�,
�opposition� and �symmetry�, each of which are linked together by proximity
(i.e. association) weights. Each concept has a pre-assigned �conceptual depth�
and activation. The conceptual depth is a sort of aesthetic, subjective,
hand-coded value intended to capture how abstract or interesting a concept is.
The activation reflects the extent to which the concept appears to be relevant
to the current problem, and how activated nearby/associated concepts are.</span></p>

<p class=MsoNormal><span style='mso-bookmark:OLE_LINK1'><i>Coderack<o:p></o:p></i></span></p>

<p class=MsoNormal><span style='mso-bookmark:OLE_LINK1'>The Coderack is the
repository for the codelets � these are small, specific pieces of code that
carry out low-level tasks. Some codelets look for particular patterns, or
evidence that a given concept may be playing a role somewhere, while others
build bonds and groups within a string, or bridges/correspondences between
strings, and finally some break these structures back down again when Copycat
seems to be hitting an impasse.</span></p>

<p class=MsoNormal><span style='mso-bookmark:OLE_LINK1'>Each codelet is
selected probabilistically from the Coderack according to its �urgency�, which
is partly hand-coded, and partly a function of the current activations and
deformations in the Slipnet, and partly affected by the preceding codelets
which triggered it.</span></p>

<p class=MsoNormal><span style='mso-bookmark:OLE_LINK1'><i>Workspace<o:p></o:p></i></span></p>

<p class=MsoNormal><span style='mso-bookmark:OLE_LINK1'>This is a sort of
scratchpad on which the codelets operate, containing the strings, and the
structures built up between them. The strength of a structure is a function of
the activation and conceptual depth of the related concept (e.g. sameness,
successorship), how long it has lasted, whether it conflicts with other
structures, amongst other factors. Structures can be nested. I find it useful
to think of the Workspace structures as tokens of Slipnet concept-types.</span></p>

<span style='mso-bookmark:OLE_LINK1'></span>

<p class=MsoNormal>Copycat is great at interacting top-down and bottom-up,
being mostly sensible but not myopically systematic, and building structures so
that they �flex� in the right places. Hofstadter terms the system�s overall
approach a <i>parallel terraced scan</i>, which can be understood in search
terms as exploring the most promising avenues proportionally/probabilistically
more. Where the agenda of a depth-first search is a stack, and breadth-first
uses a queue to decide the next node, the parallel terraced scan uses a
stochastic priority-queue of codelets, ordered by their �urgency�. These
priorities are based on the bi-directional interactions between the top-down
associations and concept activity-values in the Slipnet and the happiness and
salience of the bottom-up structures built by the codelets.</p>

<p class=MsoNormal>Finally, the <i>temperature</i> is a measure of the richness
and internal coherence of the structures that have been built up so far in the
Workspace. When these structures are weak, employing conceptually shallow
concepts, and when large parts of the strings haven�t been accounted for or
don�t fit, the temperature is high, making all the processes more stochastic,
and increasing the urgency of dismantler codelets. As the system builds more
coherent structures, the temperature drops, and the decisions become more
deterministic and less destructive. The temperature can then be seen as a kind
of measure of the system�s happiness with the solution it has found. As a
result, Copycat may find a less satisfying analogy quite often (it has no
memory of past solutions), but occasionally stumble across a highly satisfying
solution, mirroring results with human experimental subjects.</p>

<p class=MsoNormal>An example should suffice to convey the difference between
more common and more satisfying solutions. If faced with the problem:</p>

<p class=MsoNormal align=center style='margin-left:17.85pt;text-align:center'><i>abc
</i><span style="mso-spacerun: yes">�</span>:<span style="mso-spacerun: yes">�
</span><i>abd<span style="mso-spacerun: yes">� </span>::<span
style="mso-spacerun: yes">� </span>xyz </i><span style="mso-spacerun:
yes">�</span>:<span style="mso-spacerun: yes">� </span><i>?<o:p></o:p></i></p>

<p class=MsoNormal>most people�s first choice would probably be <i>xya</i>,
since we want to find a successor to the rightmost letter and so we loop back
through the alphabet. However, a circular link from �z� to �a� has been deliberately
excluded from Copycat�s conceptual model, which forces people to think harder.</p>

<p class=MsoNormal>As a result, Copycat frequently builds up a set of
structures on the Workspace that lead it to seek the successor of the rightmost
letter, only to hit an �impasse� (<i>see Fig. 2</i>). This happens often
because Copycat�s parameters are set so that it sees successorship groups more
readily than predecessorship groups, which is intended to reflect human
(especially Western) preferences for incrementing over decrementing and left-to-right
over right-to-left.</p>

<p class=MsoNormal>As a result, the solutions it comes up most commonly include
<i>xyz</i>, <i>xyy</i>, <i>xyd </i>and <i>abd</i>. However, there is a solution
that many people find very satisfying once they see it, though few people
notice it immediately, which is <i>wyz</i>. This requires a mini paradigm
shift. The impasse occurs because <i>abc</i> is described as a group of
successors heading rightwards from the first letter of the alphabet, and the
most obvious mapping is to see <i>xyz</i> correspondingly as a group of
successors heading rightwards ending on the last letter of the alphabet. In
order to scale the impasse, <i>xyz</i> has to be reconceptualised as a group of
predecessors heading leftwards from the last letter of the alphabet. This is
exactly symmetrical to the description of <i>abc</i>, prompting a reversal of
the rule from <i>abc</i> to <i>abd</i> of �replace the rightmost letter with
its successor� to �replace the leftmost letter with its predecessor�. When I
first saw this, I certainly felt that the choice of the seemingly uninteresting
letterstrings microdomain as allowing for complex, psychologically plausible
constructions was vindicated. Copycat finds the less satisfying solutions more
often, but when it does find the <i>wyz</i> solution its satisfaction with the
solution (as measured by a lower temperature) is much higher [See Hofstadter,
1995; and Mitchell, 1993 for a plethora of further letterstring puzzles that
Copycat can solve].</p>

<h5>Metacat</h5>

<p class=MsoNormal>Metacat [Marshall, 1999] is the second generation of
Copycat, differing in a couple of important respects.</p>

<p class=MsoNormal>Firstly, Metacat is able to produce multiple answers for a
given problem in a single run, reporting each and carrying on. In contrast,
Copycat would stop each run every time it found an answer, starting each run
afresh and blissfully ignorant of past successes and failures.</p>

<p class=MsoNormal>Secondly and crucially, Metacat builds a �trace� of its
operations as it goes along, capturing both an abstraction of the process of
discovery as well as the nitty-gritty details of the state of the whole Copycat
system. These extra levels of self-watching and remembering have a number of
advantages. Metacat is able to avoid getting trapped in a loop or freezing when
faced by an impasse that it has encountered before. In contrast, when Copycat
tries to find the successor of �z� and fails, the temperature slowly rises,
certain structures that led to this dead end become more likely to be
dismantled, and more often than not it retraces some of its steps only to try
the very same tactic in a few iterations� time. Furthermore, by maintaining a
trace of its activity as well as details of past runs, Metacat is able to use
past experience to avoid this folly, and head towards a known solution or try
new avenues. The most important concepts employed in a given solution are
termed �themes� � by storing the themes along with the salient events and steps
in a given run, Metacat is trying to capture the essential features of a given
situation, allowing limited comparison between different solutions to the same
problem.<i><o:p></o:p></i></p>

<h5>Magnificat</h5>

<p class=MsoNormal>Very recently, I discovered an essay online discussing vague
plans for the latest implementation in the Copycat family, named Magnificat
[Roberts, unpublished]. Pleasingly, many of the aims and high-level ideas
raised dovetail with those discussed here, though it also contains a number of
architectural innovations that deserve greater consideration than I have room
for. I will consider them in passing if I feel they can especially help.</p>

<h5>Lessons from the Copycat family</h5>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>I consider
Hofstadter�s work on analogy-making to be the richest source of ideas and the
most impressive implementation around at the moment. Although he focuses on
micro-domains, and makes no claims to have modelled the thought processes of
great scientists from the past [cf Langley, 1987], there is a sense that the
kinds of analogies that Copycat is able to see involve a directed and really
quite human-like exploration of a far greater space.<o:p></o:p></span></p>

<p class=MsoNormal>One of the most important lessons I want to take away from
Hofstadter et al.�s work is the need to build up a representation of the situation,
with both top-down and bottom-up influencing each other, in order to be able to
choose what�s relevant for the current analogy. The flipside of this is that
concepts become rich and meaningful by virtue of the way in which they can be
decomposed and combined into, and influence other concepts. I�m also conscious
of the adaptability of Copycat�s basic architecture � at least in theory, with
different concepts, codelets and their associated parameters, Copycat could be
adapted to more or less any domain. Furthermore, Hofstadter claims that the
parallel terraced scan is fairly resistant to problems of combinatorial
explosion.</p>

<h5>Limitations of the Copycat family</h5>

<p class=MsoNormal>However, even within the letterstrings domain,
Copycat/Metacat is limited. There are concepts that we might expect it to have
that it lacks. For instance, Copycat can�t deal with sequences that aren�t
successors or predecessors, e.g. sequences that skip every other letter.
Importantly, it can�t deal with mappings involving more than one letter change,
though apparently Metacat improves upon this. It can�t deal with certain types
of noise, nor represent interleaved sequences, e.g. <i>abacadae</i>. It can�t
devise analogies of its own, nor learn from counter-examples. Finally,
Metacat�s ability to see compare analogies is limited, as is its ability to
search for past cases.</p>

<p class=MsoNormal>Some of these issues are quibbles, but some mask deep-seated
limitations of the architecture. After all, Hofstadter explicitly states that
he is not especially considering the issues of learning or self-organisation.
Unfortunately, the Copycat system relies heavily on a large number of
hand-coded parameter values that determine the various probabilities and
relations between the system's different processes and the structures they
build. The system's impressively human-like performance on a number of
abstract, difficult problems very rich in internal structure (despite the
limited domain) depends upon these preset, subjective, tweaked values, as well
as a number of implicit judicial decisions with regard to the kinds of concepts
that such a system should look for. Indeed, the choice of concepts and codelets
was guided by five difficult sample problems (including the <i>xyz</i> one
detailed above) that they wanted Copycat to be able to solve. Porting Copycat
to a different domain, or expanding the letterstrings domain, while maintaining
the delicate balance between the current concepts, would always be a
labyrinthine labour-intensive task.</p>

<h2>Building on Copycat</h2>

<p class=MsoNormal>I�m not going to try and tackle all of these limitations.
The goal of the discussion in this paper is to consider how a curious, learning
analogy-making system might be incorporated as a component in a much larger and
more domain-general learning system. Unfortunately though, the problem of getting
Copycat to learn or self-organise to adapt itself to new domains is a deep one.
I�m going to identify a number of different levels at which some sort of
learning or self-organising mechanism (or set of mechanisms) would be
necessary, and then discuss how easy it would be to build a system that could
learn to operate in different and potentially more complex domains than the
letterstrings based on some of these ideas.</p>

<p class=MsoNormal>In the grand tradition of the Fluid Analogies Research Group
of giving their projects capricious and unnecessarily clever names, I will
refer to this sketch of a curious, self-organising, domain-general system that
learns by making analogies as �CuriousCat�.</p>

<h3><a name="_Toc40559202">Searching through the parameter space</a></h3>

<p class=MsoNormal>If we were to take the results from even a small sample of
human subjects on a suite of letterstring problems, we could use reinforcement
learning [Sutton and Barto, 2002] or genetic algorithms (GA) [Holland 1975;
Koza 1997] to search the space of parameters to find the combinations that
match up with the experimental data. Indeed, Hofstadter et al. appear to have
the experimental data to do this. In their discussion of Copycat�s success,
they frequently compare results from multiple Copycat runs with answers given
by people to the same questions.</p>

<p class=MsoNormal>I will sketch a genetic algorithm that could search through
the parameter space<span style="mso-spacerun: yes">� </span>to find a vector of
parameters for its pre-coded concepts and codelets that would lead it to find
solutions more often that have a lower temperature and that match human
choices.</p>

<p class=MsoNormal><i>Genotype<o:p></o:p></i></p>

<p class=MsoNormal>The genotype of the GA will be a vector of the parameters
being tweaked. Parameters relating to families of codelets and related areas of
the architecture would be located next to each other. Approximate upper and
lower bounds could be set for some parameters, to keep them in line with human
intuitions, and to try and preclude the system from choosing some peculiar
combination that appears to work for the particular training set, but performs
poorly on novel data.</p>

<p class=MsoNormal>The full list of parameters would be huge, since Copycat
employs a huge array of fudges in all of its computations, especially the
codelets, but a partial list should at least include the following:</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l14 level1 lfo16;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>the association strengths between concepts in the
Slipnet</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l14 level1 lfo16;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>conceptual depths</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l14 level1 lfo16;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>codelet urgencies</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l14 level1 lfo16;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>workspace structure happiness and salience values</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l14 level1 lfo16;
tab-stops:list .25in'><![if !supportLists]><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>the algorithm for calculating the temperature based on
all of the above</p>

<p class=MsoNormal><i>Phenotype<o:p></o:p></i></p>

<p class=MsoNormal>The phenotype is a version of Copycat running with the
parameters in its genotype. Ideally, because Copycat�s processing is highly
stochastic, it should be run many times on each problem.</p>

<p class=MsoNormal><i>Population<o:p></o:p></i></p>

<p class=MsoNormal>The easiest population to start with would centre around the
set of parameters that the published version of Copycat employs, since these
parameters are pretty close to the optimal location in parameter-space for
modelling human performance. Having larger variation within the starting
population or starting with randomly-generated populations might indicate
whether the parameters converge towards a limited number of optima, and to see
whether the hand-coded ones can be improved upon.</p>

<p class=MsoNormal><i>Inheritance operators<o:p></o:p></i></p>

<p class=MsoNormal>A GA might work reasonably well for this problem since it
could allow for the majority of the traversal through the space to be performed
by crossover recombination, while individual parameters could be tweaked
slightly by mutation. Once a set of parameters for a concept/codelet have
stabilised, crossover will combine them with other subsets of the
parameter-vector that work too.</p>

<p class=MsoNormal><i>Fitness function</i></p>

<p class=MsoNormal style='margin-top:4.0pt'>There are various fitness functions
that could be employed:</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l16 level1 lfo19;
tab-stops:list .25in'><![if !supportLists]>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>The simplest would be to set the fitness as the proportion of
people who gave a particular answer to a given letterstrings problem. For
instance, if 90% of respondents think that for the problem:</p>

<p class=MsoNormal align=center style='margin-top:4.0pt;text-align:center'><i>abc<span
style="mso-spacerun: yes">� </span>:<span style="mso-spacerun: yes">�
</span>abd<span style="mso-spacerun: yes">� </span>::<span style="mso-spacerun:
yes">� </span>ijkk<span style="mso-spacerun: yes">� </span>:<span
style="mso-spacerun: yes">� </span>?<o:p></o:p></i></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>that <i>ijll</i> is the best
solution, then that could be given a fitness of 0.9. This could be continued
for each answer that people gave, where some very rare answers will have tiny
fitness. Answers that no human gave will have a fitness of zero. There would be
no negative fitness.</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l16 level1 lfo19;
tab-stops:list .25in'><![if !supportLists]>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>The above fitness function would work moderately well, but it
would have the unfortunate effect of biasing the system to find common
solutions, which may not necessarily be the most <i>satisfying</i>. As
mentioned earlier, often people will be shown a solution that hadn�t occurred
to them, which they will then acknowledge to be more satisfying (though less
obvious) then their own. To compensate for this, we could:</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:18.75pt;margin-bottom:.0001pt;text-indent:-18.75pt;tab-stops:1.5in'>a)
Present subjects with a pre-prepared shortlist of solutions in multiple-choice
format, including the less common but more satisfying ones. Subjects would be
asked to choose the most satisfying. There would need to be procedures for
adding new unconsidered answers to the list occasionally, if a subject
discovers an unlisted solution.</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:18.75pt;margin-bottom:.0001pt;text-indent:-18.75pt;tab-stops:1.5in'>b)<span
style='mso-tab-count:1'>��� </span>If everyone chooses the same favourite
solutions, then this may lead to too sparse a data set for the second-best and
mediocre solutions. The search through the high-dimensional parameter space
would require fewer data points (i.e. fewer subjects and questions) if there
are various graded fitness-values, rather than one correct answer for each
problem and practically no fitness-values for any of the slightly less
satisfying answers. This could be solved by having subjects rank all of the
solutions. Some scoring system would have to be devised, such that
higher-ranked solutions are worth rather more than lower-ranked solutions when
totalling up the frequency with which each solution is chosen (like in Formula
One Grand Prix championship points).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:.25in;margin-bottom:.0001pt;text-indent:-.25in;mso-list:l16 level1 lfo19;
tab-stops:list .25in'><![if !supportLists]>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>Alternatively, subjects could be asked to assign subjective
satisfaction scores (out of 100) to solutions, either their own or chosen from
a shortlist. The fitness here could be calculated as:</p>

<p class=MsoNormal align=center style='margin-left:17.7pt;text-align:center'><i>F<span
style='mso-tab-count:1'>���� </span>=<span style='mso-tab-count:1'>���� </span>
1 - <u>|S � (T � 100)|</u><o:p></o:p></i></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:17.7pt;margin-bottom:.0001pt;text-align:left;
tab-stops:center 139.5pt 292.5pt'><i><span style='mso-tab-count:1'>����������������������������������������������� </span>100<o:p></o:p></i></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.7pt;margin-bottom:.0001pt'>where <i>F</i> is the <i>fitness</i>,
<i>S</i> is the <i>average human subjective satisfaction score</i>, and <i>T</i>
is the Copycat <i>temperature</i><a style='mso-footnote-id:ftn2' href="#_ftn2"
name="_ftnref2" title=""><span class=MsoFootnoteReference><span
style='mso-special-character:footnote'><![if !supportFootnotes]>[2]<![endif]></span></span></a>
for that run. When <i>S = T</i>, <i>F = 1</i>. For a maximum discrepancy, where
<i>S = 100</i> and <i>T = 0</i> (or vice versa), <i>F = 0</i>. We can imagine
various other fitness functions where the fitness might be non-linearly related
to the difference between <i>S</i> and <i>T</i>, but this illustrates the idea.</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.7pt;margin-bottom:.0001pt'>This approach might be interesting
but problematic. This scheme assumes that there is a consensus about which
analogies people find satisfying, since Hofstadter implies this in his
discussion. However, without having access to experimental data, it�s difficult
to know how large the variance between people�s subjective assessments would
be, but with a little instruction it seems reasonable to hope that this could
work. </p>

<p class=MsoNormal>These fitness functions are just intended to give a flavour
of how such a system for tweaking the parameters to give human-like performance
might work � there will almost certainly be even better ways of calculating the
fitness, discoverable through experiment and differing from domain to domain</p>

<p class=MsoNormal>Given that Mitchell has written a book on GAs, I presume
that this approach has occurred to their group, although I�m not aware of it
ever having been implemented.</p>

<p class=MsoNormal>It is worth noting that if there was some fixed and
versatile means of calculating the temperature, then human subjects would not
be needed at all. Instead, the system could use its self-calculated temperature
as the fitness score, and it could run itself many times in an effort to find a
set of parameters that commonly produces low temperatures across its training
set. Unfortunately, since the temperature is in part calculated by the activity
of the codelets, it cannot be both a dimension in the search space as well as
the fitness by means of which the search is directed.</p>

<h3>Remembering and self-watching</h3>

<p class=MsoNormal>The next important component that needs to be considered is
Metacat�s capacity for remembering, self-watching and self-evaluation. Although
I criticise these mechanisms as being somewhat limited, it is worth noting in
Metacat�s defence that �the focus in Metacat [was] not on learning to make
�better� analogies, or to make them more �efficiently�, but rather on being
able to explain why one analogy is judged to be more compelling than another�
[Marshall, 1999].</p>

<p class=MsoNormal>As described, Metacat produces a trace of every run, which
is really a high-level abstraction of the events that occurred during that run.
This makes it possible, in principle, to search through past runs to see how
they might be similar to the current run at a high-level, even though the
actual letterstrings involved may be superficially very different. This is what
Carbonell et al. term a �derivational analogy� [Carbonell, 1986]. Unfortunately
though, Metacat doesn�t seem to quite do this. As far as I can tell, the search
through stored runs is limited to those which involve some of the same
letterstrings. This amounts to little more than an engineering hack to avoid
falling into already-experienced traps and to allow the reuse of past solutions
as a time-saver, although it does allow a basic comparison of problems to
identify which particular steps or themes (i.e. instantiated concepts) were
present in one and missing from the other.</p>

<p class=MsoNormal>This approach is restricted in terms of what it can do:</p>

<p class=MsoNormal style='margin-left:35.85pt;text-indent:-.25in;mso-list:l7 level1 lfo17;
tab-stops:list 35.85pt'><![if !supportLists]>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>It can�t form meta-analogies</p>

<p class=MsoNormal style='margin-left:35.85pt;text-indent:-.25in;mso-list:l7 level1 lfo17;
tab-stops:list 35.85pt'><![if !supportLists]>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>It can�t use the parallel terraced scan to compare problems</p>

<p class=MsoNormal>Over the course of the rest of the paper, I will propose
extensions to the architecture that would hopefully address both these issues,
and drastically augment the representative power of CuriousCat as a result.</p>

<h5>Meta-analogies</h5>

<p class=MsoNormal>Forming a meta-analogy is not quite as silly as it sounds,
and I will describe an example to demonstrate that people can do this, perhaps
even with relative ease, and that it might prove a powerful cognitive
mechanism. I discussed the example of:</p>

<p class=MsoNormal align=center style='margin-left:17.85pt;text-align:center'><i>abc
</i><span style="mso-spacerun: yes">�</span>:<span style="mso-spacerun: yes">�
</span><i>abd<span style="mso-spacerun: yes">� </span>::<span
style="mso-spacerun: yes">� </span>xyz </i><span style="mso-spacerun:
yes">�</span>:<span style="mso-spacerun: yes">� </span><i>?<o:p></o:p></i></p>

<p class=MsoNormal>above. I described how the most satisfying solution is
usually considered to be <i>wyz</i>. Interestingly, we can see that if we tweak
the original letterstrings slightly, the subtle pressures that lead to <i>wyz</i>
are no longer exerted. Consider:</p>

<p class=MsoNormal align=center style='margin-left:17.85pt;text-align:center'><i>rst</i><span
style="mso-spacerun: yes">� </span>:<span style="mso-spacerun: yes">� </span><i>rsu<span
style="mso-spacerun: yes">�� </span>::<span style="mso-spacerun: yes">��
</span>xyz </i><span style="mso-spacerun: yes">�</span>:<span
style="mso-spacerun: yes">� </span><i>?<o:p></o:p></i></p>

<p class=MsoNormal>The same impasse of trying to find the successor to �z�
still applies here, but the appeal of recasting <i>xyz</i> as a leftwards
predecessorship group is considerably reduced, because the symmetry with <i>abc</i>
as a rightwards successorship group is enhanced by the fact that the leftmost
letter �a� is the first letter of the alphabet, and the <i>right</i>most letter
�z� is the <i>last</i> letter of the alphabet. Because this aspect of the
symmetry is missing between �r� and �z�, <i>wyz</i> is no longer considered to
be so subtle, satisfying and appropriate � indeed, no such single,
highly-satisfying solution exists for the <i>rst</i> version of the problem.</p>

<p class=MsoNormal>If we were to take another pair of similar analogy problems,
where one has a deeply satisfying solution and the other doesn�t, despite the
only change being the starting letter of the groups (or some other seemingly
trivial and superficial modification), then I think it would be fair to see
that this analogy between analogies is a meta-analogy. Moreover, this is not
particularly difficult for humans to represent, but Metacat cannot manage it. I
will give a very quick example [for a considerably more detailed exposition of
the following problems, see Hofstadter, 1995; or Mitchell, 1993]:</p>

<p class=MsoNormal align=center style='text-align:center;tab-stops:center 229.5pt right 459.0pt'><i>abc</i><span
style="mso-spacerun: yes">� </span>:<span style="mso-spacerun: yes">� </span><i>abd<span
style="mso-spacerun: yes">�� </span>::<span style="mso-spacerun: yes">��
</span>mrrjjj </i><span style="mso-spacerun: yes">�</span>:<span
style="mso-spacerun: yes">� </span><i>?<o:p></o:p></i></p>

<p class=MsoNormal align=center style='text-align:center;tab-stops:center 229.5pt right 459.0pt'><i>ijk<span
style="mso-spacerun: yes">� </span>: ijl<span style="mso-spacerun: yes">��
</span>::<span style="mso-spacerun: yes">� </span>mrrjjj<span
style="mso-spacerun: yes">� </span>:<span style="mso-spacerun: yes">� </span>?<o:p></o:p></i></p>

<p class=MsoNormal>In the case of the <i>abc/mrrjjj</i> problem, the
letter-category successorship group of <i>abc</i> is mapped onto a
string-length successorship group of <i>mrrjjj</i> � that is, a group with
first one letter then two letters then three letters. Replacing the rightmost
group with its successor in this case is to replace it with a group that is
longer by one, i.e. �jjjj�. Thus, the most satisfying answer to the <i>abc/mrrjjj</i>
problem is considered to be <i>mrrjjjj</i> (<i>see Fig. 3</i>). Further, note
that:</p>

<p class=MsoNormal style='margin-top:4.0pt;tab-stops:121.5pt 139.5pt'><i>a</i>
(<i>1</i>st letter in the alphabet)<span style='mso-tab-count:1'>��� </span><span
style='font-family:Symbol;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:Symbol'><span
style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>�</span></span><span
style='mso-tab-count:2'>���� </span><i>m</i> (length <i>1</i>)</p>

<p class=MsoNormal style='margin-top:2.0pt;tab-stops:121.5pt 139.5pt'><i>b</i>
(<i>2</i>nd letter in the alphabet)<span style='mso-tab-count:1'>�� </span><span
style='font-family:Symbol;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:Symbol'><span
style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>�</span></span><span
style='mso-tab-count:2'>���� </span><i>rr</i> (length <i>2</i>)</p>

<p class=MsoNormal style='margin-top:2.0pt;tab-stops:121.5pt 139.5pt'><i>c</i>
(<i>3</i>rd letter in the alphabet)<span style='mso-tab-count:1'>��� </span><span
style='font-family:Symbol;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:
"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:Symbol'><span
style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>�</span></span><span
style='mso-tab-count:2'>���� </span><i>jjj</i> (length <i>3</i>)</p>

<p class=MsoNormal>In the case of the <i>ijk/mrrjjj</i> problem, <i>mrrjjjj</i>
is a less satisfying answer, because although <i>ijk</i> contains a successor
group, �i� is not the first, �j� is not the second and �k� is not the third
letter of the alphabet. Again, this tweak of changing the starting letter from
�a� to �i� results in a considerably less satisfying solution overall, although
the themes of �successorship�, �sameness� and �length� are common to both
problems. The meta-analogy that I am proposing is then of this form:</p>

<p class=MsoNormal align=center style='margin-left:17.85pt;text-align:center'><i>abc/xyz
</i>:<span style="mso-spacerun: yes">� </span><i>abc/mrrjjj<span
style="mso-spacerun: yes">� </span>::<span style="mso-spacerun: yes">�
</span>rst/xyz </i><span style="mso-spacerun: yes">�</span>:<span
style="mso-spacerun: yes">� </span><i>ijk/mrrjjj<o:p></o:p></i></p>

<p class=MsoNormal><span style='color:red'>As an aside, I still get a nosebleed
every time I try and imagine what a meta-meta-analogy in the letter-strings
domain might be like. Suggestions or tissues would be welcome. However, I can
more easily conceive how cross-domain meta-meta-analogies might be interesting.
For instance, imagine that a version of CuriousCat was being built that could
also function in a new domain, such as the geometric SAT-type puzzles that
Evans (1968) describes. I have tried to provide an example (see Fig. 4) of two
such analogy-puzzles, which together form a meta-analogy where simply changing
the starting symbol on the left-hand side weakens the analogy. This pair forms
a meta-analogy, that can be seen as a cross-domain meta-meta-analogy when
compared to the letter-strings. , that A meta-meta-analogy that could prove
useful would be with two geometric analogy-puzzles, where simply moving the
left-hand side of a shape slightly could render a highly-satisfying solution
much less appropriate.<o:p></o:p></span></p>

<p class=MsoNormal>of thiies, and whether this might be useful.</p>

<h5>Using the parallel terraced scan to compare problems</h5>

<p class=MsoNormal>Metacat�s means of retrieving past cases appears to be very
limited. In the terminology of case-based reasoning [<span style='mso-bidi-font-style:
italic'>Leake (1996), Kolodner</span>], its retrieval is indexed by the
letterstrings and by themes, and not at all by the structure of the trace. What
if we wanted to find a case that had similar themes to the one being
considered, but used entirely different letterstrings, and also involved lots
of snags and dismantling but eventually found a satisfying solution? Metacat
couldn�t conduct this search, though we might well want it to. After all, what
could be more useful than to be reminded of a superficially different but
thematically similar problem which was also problematic, but eventually proved
tractable? The way to do this would be to conduct a parallel terraced scan on
stored memories to tentatively suggest a number of potential candidates, and
then winnow down to the particular cases whose theme <i>and</i> trace
structures match most deeply. This is similar to what Gentner and Markman
[1997] refer to as the �many are called but few are chosen� principle.</p>

<h5>Working on traces in the same way we work on letterstrings</h5>

<p class=MsoNormal>The lesson from the discussion of meta-analogies is that
really powerful and abstract thinking requires the ability to further chunk
relations and transformations of already-chunked representations. Metacat
cannot do this. Its Slipnet is fixed in size and repertoire, and the Slipnet
nodes are internally structureless. It cannot chunk events/themes in the trace
to compare traces at a higher level of description.</p>

<p class=MsoNormal>The first major step towards addressing this would be to
treat the events (such as �snag�, �drop in temperature�) that are stored in the
Metacat trace just like �event-letters� in a meta-Workspace that we might term
the �Trace-Workspace�, along with an accompanying Trace-Slipnet and
Trace-Coderack too. Events could then be chunked together to form
event-structures of different types, such as:</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>the �loop�, when the same snag is
experienced repeatedly, and no huge drop of temperature results (which would
indicate that a solution had been found)</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>the �destructive rage�, involving a
flurry of activity from the dismantler codelets</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>�frustration�, where the same snag
is experienced repeatedly, followed by a destructive rage</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>the �paradigm shift�, composed out
of some snags, subsequent dismantlings, some reassembly and a huge drop in
temperature</p>

<p class=MsoNormal>Of course, many many more will exist, if we want to
catalogue the various types and combinations of events. Interestingly, if we
were to try and represent these event-structures as letterstrings, they might
look something like this (using capitals to distinguish them from the standard
letterstrings):</p>

<p class=MsoNormal style='margin-top:0in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<table border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=185 valign=top style='width:111.2pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:0in'>loop (<i>L</i>):</p>
  </td>
  <td width=185 valign=top style='width:111.2pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:0in'><i>SSS�</i></p>
  </td>
 </tr>
 <tr>
  <td width=185 valign=top style='width:111.2pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:4.0pt'>destructive rage (<i>R</i>):</p>
  </td>
  <td width=185 valign=top style='width:111.2pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:4.0pt;tab-stops:1.5in'><i>DDD�</i></p>
  </td>
 </tr>
 <tr>
  <td width=185 valign=top style='width:111.2pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:4.0pt'>frustration (<i>F</i>):</p>
  </td>
  <td width=185 valign=top style='width:111.2pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:4.0pt;tab-stops:1.5in'>e.g. <i>SSSHDDD<o:p></o:p></i></p>
  <p class=MsoNormal style='margin-top:0in;tab-stops:1.5in'>or just: <i>LHR<o:p></o:p></i></p>
  </td>
 </tr>
 <tr>
  <td width=185 valign=top style='width:111.2pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:4.0pt'>paradigm shift (<i>P</i>)</p>
  </td>
  <td width=185 valign=top style='width:111.2pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:4.0pt;tab-stops:1.5in'>e.g. <i>SSSHDDDBC</i></p>
  <p class=MsoNormal style='margin-top:0in;tab-stops:1.5in'>or just: <i>FBC<o:p></o:p></i></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;tab-stops:1.5in'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-top:0in'>where:</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><i>S</i> � snag</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><i>D</i> � dismantlement</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><i>B</i> � building a structure</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><i>C</i> � large drop in temperature
(<u>c</u>older)</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><i>H</i> � large increase in
temperature (<u>h</u>otter<u>)<o:p></o:p></u></p>

<p class=MsoNormal>This simple (and ugly) notation is intended to illustrate a
few important points.</p>

<p class=MsoNormal>Firstly, notice that the loop and destructive rage look just
like special kinds of sameness-groups. <i>SHD</i> and <i>LHR</i> look almost
like successorship groups (though allowing the same letter to have more than
one potential successor). <i>D</i> and <i>B</i>, and <i>C</i> and <i>H</i>, are
opposites. <i>C</i> is strongly associated with the rightmost position. If we
think of the events as letters, then we find that our letterstring concepts
start to apply. This feels like an exciting, though perhaps somewhat
obvious-seeming, observation. Given this pleasing applicability of
letterstrings concepts to our Trace-architecture, it make much more sense to
implement the Trace-Workspace as simply an area within the standard Workspace.
Events would be represented at the same level as letterstrings, Trace-concepts
would interact with the standard Slipnet-concepts in the same semantic network
(although the two groups would probably be fairly sparsely inter-connected),
and Copycat codelets could operate upon Trace-structures (though probably not
vice versa). This approach could well prove to have powerful advantages,
especially with regard to the discussion below about the generation of concepts
(fresh or compound). For the moment though, I will continue to talk as though
the Trace-architecture is kept separate from the standard architecture for
simplicity of exposition.</p>

<p class=MsoNormal>Secondly, we need a better means of writing down a schema or
template for structures. We want to say that a loop has some indefinite number
of snags, perhaps with other events sandwiched in between � in other words, we
want to say <i>(S.)*</i>, using the powerful notation of regular expressions.
In fact, I will discuss below how the regular expression notation could be
utilised as a means of representing structures and codelet algorithms across
the Copycat letterstrings domain.</p>

<p class=MsoNormal>Thirdly, we now have a high-level description that might
constrain our trawl through memory when trying to find past problems that
usefully resemble the current one. Metacat already looks for problems that have
similar themes to the current one, such as �symmetry�, �successorship�,
�predecessorship�, �first letter of alphabet�<span style='mso-bidi-font-style:
italic'> and �end of alphabet</span> in the case of the <i>abc/xyz</i><span
style='mso-bidi-font-style:italic'> problem. It can tell that the </span><i
style='mso-bidi-font-style:normal'>rst/xyz</i><span style='mso-bidi-font-style:
italic'> version lacked the �first letter of alphabet� and �symmetry� themes,
which is why it�s different. Now, perhaps CuriousCat could seek as well for
past problems that match these thematic descriptions, as well as having a
paradigm shift (for instance) somewhere along the way. It could also see
whether all the remembered problems similar to the </span><i style='mso-bidi-font-style:
normal'>rst/xyz</i><span style='mso-bidi-font-style:italic'> version involved
frustration without a paradigm shift, as a means of deciding that further
effort on a problem which consistently appeared to have no satisfying solution
would be fruitless.<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-style:italic'>Fourthly, I don�t
think it�s entirely a coincidence that very emotive words like �frustration�
and �rage� seem to so aptly describe the trace-patterns described here. Being
stuck (when there are few particularly urgent codelets waiting and few salient
structures calling for attention), feeling encouraged (a series of small drops
in temperature) and resignation (when a problem is deemed intractable) are
other emotional states that we can easily imagine might fit into this
Trace-based language of the emotions. Might even humour be partially
describable as a slightly far-fetched or unusual, incongruous or unexpected
trace-pattern? As we will see later, I also think that curiosity can be seen
partly in these terms.<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-style:italic'>Finally, the
incorporation of the Trace-architecture would go some way towards allowing
CuriousCat to see the meta-analogy described above, where we are comparing two
pairs of analogies, in which a single superficial-seeming tweak (to the
starting letter) has caused one problem to be considerably more frustrating
than another.<o:p></o:p></span></p>

<p class=MsoNormal>Seeing such a meta-analogy requires seeing that:</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l11 level1 lfo18;
tab-stops:list .25in'><![if !supportLists]>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>they share some similar themes, but the <i>rst/xyz</i> version
lacks some</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l11 level1 lfo18;
tab-stops:list .25in'><![if !supportLists]>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>all of the runs on both problems involve lots of snags,
dismantling and rebuilding, but one problem (<i>abc/xyz</i>) occasionally
admits a highly satisfying solution while the other (<i>rst/xyz</i>) never does</p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l11 level1 lfo18;
tab-stops:list .25in'><![if !supportLists]>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>seeing that both these points also hold true of the second
pair of problems, <i>ijk/mrrjjj</i> and <i>ijk/mrrjjjj</i></p>

<p class=MsoNormal>We would be using a parallel terraced scan to do a search
through the traces themselves, in order to appreciate that each pair of
problems consists of a slight dissimilarity in themes resulting in a drastic
difference in how satisfying their best solutions are. Of course, if we were
now to keep a trace of the activity on the Trace-Workspace, a �Trace-Trace�,
then it would be possible to search through past meta-analogy cases to find
similar meta-analogies to the one above.</p>

<p class=MsoNormal>The architecture I have sketched above does not go into
enough detail to show exactly what kind of trace-concepts, codelets and
rule-transformations would be needed, nor exactly how the trace and theme
information for each problem would be represented on the Trace-Workspace. But
it is hoped that it does show how the natural and elegant extension of the
Metacat architecture of treating trace data at the same level and with the same
mechanisms as the letterstrings could dramatically increase the power and
abstraction of its analogy-making.</p>

<h3>Proposing new analogies<span lang=EN-US style='mso-ansi-language:EN-US'> <o:p></o:p></span></h3>

<p class=MsoNormal>Before going any further, I�m going to make what will seem
like a digression in order to tie up a thread that we will need for our grand
knot later. I�m going to muse about how CuriousCat might perhaps propose its
own analogies.</p>

<p class=MsoNormal>The simplest way to do this would be to start by retrieving
a problem from memory, This should ideally be one with a satisfying solution,
indicating that it had been fully understood and that all the requisite
concepts were available. Then the system could simply fire a rule-transfer
codelet at the corresponding structure in all four strings, and see if the
analogy still holds. In this way, it could start to see what sort of
transformations preserve a particular analogy, and which destroy or undermine
it. This subtle comparison of analogies is another way of seeing exactly the
kind of thing we were doing with our discussion of meta-analogy earlier.</p>

<p class=MsoNormal>Alternatively, the system could start with a blank
Workspace, and enter a special mode where builder codelets are run on empty
space, generating placeholder structures without any letters in them. Then, we
could randomly choose a starting letter (biased perhaps towards �a� and �z�),
and the rest of the string should then be deterministically generable. Finally,
a stochastically chosen rule-transfer codelet <i>R<sub>1</sub></i> would
generate a transformation from <i>A</i> to <i>B</i>, another rule-transfer
codelet <i>R<sub>2</sub></i> would transform from <i>A</i> to <i>C</i>, and
then <i>R<sub>1</sub></i> would be run again on <i>C</i> to generate <i>D</i>.</p>

<p class=MsoNormal>Neither of these methods have been adequately fleshed out,
but I feel that this cursory outline serves to show that proposing new
analogies should not be an especially difficult problem. Proposing <i>interesting</i>
analogies based around a theme is, of course, a more fiendish business, but one
that we�ll set aside.</p>

<p class=MsoNormal><span style='font-size:12.0pt;font-family:"Arial Unicode MS";
mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
display:none;mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";
mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
display:none;mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3><a name="_Toc40559204">Expectation</a></h3>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'>In his roadmap for
Magnificat, Roberts [unpublished] introduces the notion of �expectation�, which
I think will prove especially relevant to making CuriousCat curious. It�s clear
that expectation-violation is one of the triggers for curiosity � when I�m
surprised, I get curious about why my predictions were wrong.</span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'>Two parts of the
dictionary [NSOED] definition of expectation caught my eye: �The state or
mental attitude of expecting something to happen� and �Grounds for expecting;
especially prospects of inheriting wealth�. Expectation is a state, it has
intentionality (i.e. you expect <i style='mso-bidi-font-style:normal'>something</i><span
style='mso-bidi-font-style:italic'>) you have grounds for this expectation, and
often it�s related to the prospect of good things to come. This doesn�t help us
a great deal.<o:p></o:p></span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bidi-font-style:italic'>Instead, </span>I tried to characterise
expectation in a much barer form in terms of the Copycat architecture: <i>an
expectation is a top-down influence that directs bottom-up processing to look
for something specific that would lead to a drop in temperature if found</i>.
This is by no means a rigid or full definition, and I�m sure it could easily
mislead us if taken too seriously.</span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'>Roberts� discussion
of it is short and tantalising. He proposes a �set of codelets operating
simultaneously on the Workspace, comparing and contrasting, building
expectations and tearing them down: building brand-new structure� and a recall
process, which compares the Workspace with his version of a long-term
conceptual memory:</span></p>

<p class=MsoNormal style='margin-left:17.85pt'><span style='mso-bookmark:_Toc40559204'><i>�[pulling
structure] into the Workspace bit by bit, as urgency demands. If an instance of
recall is particularly powerful (it matches structure and fulfils expectations
well, thus resolving questions) then its urgency will cause it to proceed
rather quickly and completely, but if a memory fits a situation only vaguely,
then it will influence the structure in the Workspace only vaguely�<o:p></o:p></i></span></p>

<p class=MsoNormal style='margin-left:17.85pt'><span style='mso-bookmark:_Toc40559204'><i>�An
expectation can be seen as a scan in progress � it wants to be fulfilled with
something, be that something additional structure in the Workspace, or
structure it builds in the Workspace, or structure copied from the [LTM]. I
expect the expectation to be a rather powerful organizing force in Magnificat�s
operation.�<o:p></o:p></i></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'>I can�t really do
much better than that, but I want to try and be more specific. If we reify this
expectation on the Workspace as a kind of placeholder structure waiting to be
instantiated, we can treat a failure to find part of the letterstrings to fit
into it as an violation of this expectation. In a way, the weak bond-structures
that get tentatively formed then get quickly dismantled when they interfere
with a much stronger structure, or the bridges between strings that don�t quite
fit all of the structures on each side and get broken down are also
expectations that get violated. The difference though is that these are
instantiated structures that get built in response to things that are known to
exist on the Workspace, whereas the placeholder structures are only there
because the recall process has found past or analogous memories that indicate
they might be. In either case, Copycat response would:</span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l5 level1 lfo23;
tab-stops:list .25in'><span style='mso-bookmark:_Toc40559204'><![if !supportLists]><span
style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>raise the temperature (making the whole system�s
functioning more stochastic)</span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l5 level1 lfo23;
tab-stops:list .25in'><span style='mso-bookmark:_Toc40559204'><![if !supportLists]><span
style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>direct processing towards those areas of the Workspace
to try and resolve the issue</span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'>In other words, it
will become curious about them. Furthermore, CuriousCat will be able to:</span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l1 level1 lfo22;
tab-stops:list .25in'><span style='mso-bookmark:_Toc40559204'><![if !supportLists]><span
style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>look for cases in its memory that might be less
obviously applicable (i.e. more abstract, perhaps)</span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l1 level1 lfo22;
tab-stops:list .25in'><span style='mso-bookmark:_Toc40559204'><![if !supportLists]><span
style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>flag the expectation-violation in its trace</span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'>and eventually:</span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l2 level1 lfo21;
tab-stops:list .25in'><span style='mso-bookmark:_Toc40559204'><![if !supportLists]><span
style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>try and form a new concept to plug the gap in its
conceptual repertoire.</span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'>It is to this last
vital and difficult process that I now turn.</span></p>

<h3><span style='mso-bookmark:_Toc40559204'><a name="_Toc40559206">Forming new
concepts and codelets</a></span></h3>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'><span lang=EN-US style='mso-ansi-language:
EN-US'>The area that I've spent longest with least reward considering is the
issue of how to automate generation of the Slipnet and its associated codelets.
This is, in its fullest sense, the AI complete problem of mechanistically and
efficiently generating compact hypotheses/categories that capture all and only
the features that identify a given set of examples. If we consider
analogy-making to be the </span>business of using low level concepts to build
high-level concepts that relate situations, then having the right set of
low-level concepts for each domain is crucial, as is the ability to generate
new concepts should some unexpected aspect of the situations prove to be the
essence of the analogy. Indeed, we can see all learning in terms of <i>forming
concepts and applying them to perception in such a way as to generate useful
behaviour</i>.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>For a concept to exist in the Slipnet, it
requires an associated family of codelets that do the detection,
structure-building and -evaluating, dismantling, rule-translating etc. In order
to generate a new concept, the node has to be inserted into the Slipnet,
assigned a conceptual depth, associated with other concepts, and the whole
family of codelets has to be generated. If we see the structures in the
Workspace as tokens of concept types in the Slipnet, then generating new
structures from the Slipnet nodes and associated codelets is comparatively
trivial.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>Adding a node to the Slipnet can be done in
one of at least a few ways. It can be generated afresh, assigned a default
conceptual depth and connected weakly to every single other concept. We could
then use some hill-climbing search again to try and search through its
parameter space, as before when tweaking all of the system�s parameters with
the GA. If this method were to prove necessary, it would be worth thinking
about how the system could learn after each new problem is presented, perhaps
by doing its Slipnet tweaking offline. A second method would be to copy and
paste an existing similar concept, mirroring its conceptual depth and
associations to other concepts. This is difficult though, because it requires
you to figure out which of your current concepts the new, mysterious concept is
most similar to. Ideally, we would want to be able to create compound concepts
out of combinations of current concepts, or even splice together aspects of two
concepts. To do this would require nesting concept-nodes in the Slipnet.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>Next, we need to generate new accompanying
codelets. We can see two major groups of codelets: those that deal with
structures (whether within or between strings), and those that take the rule
found that transforms from A to B, and adapt or apply it to C to produce D.</span></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='mso-bookmark:_Toc40559204'><span style='mso-bookmark:_Toc40559206'><i>A<span
style="mso-spacerun: yes">� </span>:<span style="mso-spacerun: yes">�
</span>B<span style="mso-spacerun: yes">�� </span>::<span style="mso-spacerun:
yes">�� </span>C<span style="mso-spacerun: yes">� </span>:<span
style="mso-spacerun: yes">� </span>D<o:p></o:p></i></span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>Generating new rule-transfer codelets seems a
particularly intractable problem. Let me try and explain why. Let us imagine
that we wanted a �mirroring� concept, that takes a structure and placed a copy
of the reverse-string to its right. Let us imagine that we already have an
algorithm for the seeker codelets, so they can tell when they�ve found one �
once we�ve identified a string as instantiating a concept, we can also build
the concept as a structure and we can dismantle it. However, the algorithm that
applies the mirror-rule to a part of the string in A to produce B, and in C to
produce D is still highly problematic. The only mechanistic method I could
devise to be sure to eventually capture the right rule-transfer algorithm would
be to do an exhaustive breadth-first search through the source code of some
Turing-complete language. For instance, we could take as our alphabet the
handful of operations that allow us to define any Turing machine (move tape
left, read off digit etc.), and starting with the strings of length 1, build
longer and longer strings until we found a Turing machine that performed our
rule transfer. We have all the representational power we could possibly want
with this method, but it�s wholly useless as a realistic implementation
solution. The only solution may be to devise a domain-specific high-level
language for each domain of rule-primitives like �move letter in position X to
position Y�, �replace letter X with �� etc. Unfortunately, this brings a human
back into the loop, and so in a sense is admitting defeat. Perhaps there is a
way to deal with the problem of generating rule transfer codelets in terms of
the seeking and building codelets, which I think are a little easier to think
about.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>I will propose a possible letterstrings
implementation for the structure-codelets because it�s reasonably neat, and
might grease our intuition about the kind of complementary language we would
need for rule-transfer codelets. The proposal is to use some variant of regular
expressions to capture all and only the letter combinations that instantiate a
particular concept. To give two examples, sameness would look something like <i>(a*|b*|c*|d*|�)</i>
and successorship might look like (ab|bc|cd|de|ef|�), where obviously ��� is a
technical symbol for my laziness. In the case of successorship, we would have
to build successorship groups of length greater than 2 by nesting small ones.
This would slightly change things, and would probably require tweaking the
successorship parameters to make them easier to build in some way in order to
be sure that the system notices all of a long successorship group. This problem
highlights the fact that regular expressions are limited in the kinds of string
combinations that they can represent, and so this is not a fully satisfying
solution. Of course, in the worst case we could restrict the length of our
strings to some finite number, and then enumeration would always be an option.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>In fact, the possibility of huge enumerated
lists that supposedly capture some concept could actually prove a problem. We
want to capture the best regular expression for a given concept, i.e. the one
that captures all and only the strings that instantiate that concept, using as
few enumerations as possible. One way of intuitively understanding this
�minimum description length� (MDL) (Rissanen, 1978) is as the optimal, most
compact compromise between a huge list of examples/exceptions, and a single,
very lengthy rule that fully captures all the data. Fass and Feldman [2002]
discuss how they were able to use the MDL as an indicator of the subjective
difficulty of learning some given category. The MDL two-part code will be
maximally compact when the following equation is minimised:</span></span></p>

<p class=MsoNormal align=center style='text-align:center'><span
style='mso-bookmark:_Toc40559204'><span style='mso-bookmark:_Toc40559206'><i>-log
P(D|H) � log P(H)<o:p></o:p></i></span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>where <i>D</i> is the data and <i>H</i> the
category hypothesis. The MDL is thus intended to capture �all the data,
including the uninformative noisy data that isn�t generated by the models�
[Rissanen, 1999]. It might be interesting for our purposes to be able to tip
the scales of the trade-off between model complexity and data complexity when
representing different types of concept.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>An alternative approach would be to ignore
regular expressions, but still use the idea of evaluating the power of a
concept-representation by its minimum description length. We could instead use
some sort of substitutional/dictionary encoding [Hankerson et al., 2003], where
the system tries to choose as compact as possible a codebook that losslessly
encodes all of the strings encountered so far. The serious and unavoidable
problem with this method is that it doesn�t work well with systematic but
sparse data. So, even if the system had learned the successorship concept for
the letters it commonly encounters but had never seen a letterstring using the
letter �p� before, none of the learned concepts would have �p� in their
codebooks, and it would not be true at all to say that the system had really
understood the concept.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>Finally, it�s worth noting that Roberts
proposes that a suite of generic codelets could be devised that would prove
applicable to various domains. This would be great, if possible. His approach
is to devolve much of the information from the codelet algorithms to the long-term
conceptual memory that he intends to replace the Slipnet and its concept-nodes.
These LTM-nodes will have internal structure, and will be composed out of other
LTM-nodes. Though interesting, I don�t see why it would be any easier to build
up the internal structure of an LTM-node than it would be to have codelet
algorithms with internal structure, which is one way to see the above
proposals. In short, I don�t know how his proposal makes the business of
generating arbitrary and complex new concepts easier. My only thought is that
if we can find a powerful enough representation for the codelet algorithms in
the letterstrings domain, we might try and encode other domains in terms of
letterstrings. Unfortunately, I don�t think this would work so well in domains
with continuous rather than discrete perceptual atoms (e.g. some
real-number-strings version of <i>Seekwhence</i> � see Hofstadter, 1995, ch 1).</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>The two central problems of forming new
concepts are:</span></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l0 level1 lfo20;
tab-stops:list .25in'><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'><![if !supportLists]><span style='font-size:
9.0pt;mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>how to tell when a new concept is needed</span></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l0 level1 lfo20;
tab-stops:list .25in'><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'><![if !supportLists]><span style='font-size:
9.0pt;mso-bidi-font-size:10.0pt;font-family:Symbol'>�<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>how to tell what it should do</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>I have tried to address the second point, but
the first remains. How do you realise when you have a gap in your knowledge
that would be useful to fill in? In fact, we answered this question earlier,
when we discussed expectation-violation. Forming a new concept was the last in
a chain of increasingly drastic options to be undertaken in the face of a
series of stubborn expectation violations. We can see almost all of the
discussion so far of architecture extensions as being instrumental in helping the
system tell when a new concept is needed and what it should do.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>Let us imagine that CuriousCat has been
presented with a number of problems, for which it was unable to find any
solutions whatsoever (or perhaps very unsatisfying ones) for some small proportion.
Every time it encounters another unsolvable problem, it flags the
expectation-violations and failure in its trace, and tries rebuilding in
different ways, and starts various trawls through its memory based on
redescriptions of the current situation. It decides to try looking for some
concept that will help with a number of these problems, and so uses the
unsolvable ones to focus its training set. It tries proposing new analogies
based around these problematic cases, and tries to see if it can solve them
itself. If it can, then they might provide clues about how to solve the
problematic ones. Or, it might indicate that something about the
transformations added to generate the new analogies affected the missing
concept in some way, and rendered it either unnecessary or tractable. Noticing
which themes are added and missing in all of these cases, should provide a good
indication of which concepts are similar to the prospective concept.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>Of course, the previous discussion assumes
that there is only one new concept waiting to be discovered. If there are two
or more, the new concept will end up as some sort of amalgam of them all. To
resolve this, we need further mechanisms for splitting concepts into two. For
this, we could use the same architecture-extensions to pay attention to the
frequency with which a pair of concepts are fighting to be instantiated
simultaneously as a structure on the same letters. This covariance might
indicate an overlap.</span></span></p>

<p class=MsoNormal><span style='mso-bookmark:_Toc40559204'><span
style='mso-bookmark:_Toc40559206'>Now, I want to return to my early definition
of a curious machine as one that <i>interrogates its environment</i>.
CuriousCat can be seen as engaging in an interative dialogue with the
environment about what is required of a new concept. When it starts to feel
that a new concept is necessary, CuriousCat can probe the boundaries and
situations in which the concept applies by proposing meta-analogies, i.e. by
asking �is this case like this case�? If we allow it a reward signal for the
strength of the meta-analogies, the hope is that could learn a great deal in a
short time by constraining the space in which the new concept applies.</span></span></p>

<span style='mso-bookmark:_Toc40559206'></span><span style='mso-bookmark:_Toc40559204'></span>

<h2><a name="_Toc40559210"><span lang=EN-US style='mso-ansi-language:EN-US'>Applications</span></a><span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></h2>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>I had very
much hoped to discuss how CuriousCat would deal with being ported to two new
domains (chess, and something similar to Evans� (1968) original geometric
puzzles), and how well I thought it would be able to manage without extensive
human hand-holding, but unfortunately time and space preclude this.<o:p></o:p></span></p>

<h2><span lang=EN-US style='mso-ansi-language:EN-US'>Conclusions<o:p></o:p></span></h2>

<h3><span lang=EN-US style='mso-ansi-language:EN-US'>Mapping and transformation<o:p></o:p></span></h3>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>As may have
become apparent, I have focused far more on the problem of mapping than
transformation. For instance, in the discussion on traces and meta-analogies, I
proposed a means of retrieving past situations that might be related in an
abstract way, but I hardly mentioned how we might use this knowledge, other
than to occasionally concluding when to give up on clearly fruitless problems.
Having found a past case that�s analogous to this one, we want to see how the
solution found there guides the search for a solution to the current problem.
For instance, having found the meta-analogy between <i>abc/xyz//rst/xyz</i> and
<i>abc/mrrjjj//ijk/mrrjjj</i>, we want to draw some conclusions about the kinds
of tweaks that do and don�t affect how satisfying a problem�s solution is. In
the terminology of case-based reasoning, I have focused upon the case-based
remembering, rather than case-based adaptation.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>This is
partly because one of my primary motivations was to think about how a chess
program could aid a human player by presenting analogous examples from past
games, so that the human player could see how they unfolded and adapt his game
plan accordingly. The responsibility for modifying the retrieved cases lay
squarely with the human, since this is a somewhat different and very difficult
problem far beyond the scope of this discussion.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>To some
degree, this is also because the lessons learned from Copycat about fluid
concepts scale well, while the Metacat architecture is less rich as a source of
ideas about traces, cases and episodic memory. To some degree, I think the
architecture extensions proposed here might support this further task of
adaptation. However, much more work is needed.<o:p></o:p></span></p>

<h3><a name="_Toc40559217"><span lang=EN-US style='mso-ansi-language:EN-US'>Relations
to a richer definition of curiosity</span></a><span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></h3>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'>At the
beginning, I gave a rich characterisation of curiosity along the following
lines:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:17.85pt'><i><span lang=EN-US
style='mso-ansi-language:EN-US'>Being curious is about seeking knowledge that
you don�t even know for sure that you�ll need. It�s proactive, </span>requires
a learning system and cognitive architecture complex enough to subserve
goal-directed and flexible behaviour, recognition of novelty, and some degree
of (self-)evaluation. The more complex and diverse the goals, behaviours and
representations, the more complex the curiosity manifested. There can be
different types of curiosity, triggered under different circumstances, suited
to different domains, goals or learning styles.</i><i><span lang=EN-US
style='mso-ansi-language:EN-US'><o:p></o:p></span></i></p>

<p class=MsoNormal>I don�t believe that CuriousCat would be �curious� in a
truly rich sense, but I felt happy with that characterisation of curiosity when
I gave it, and I do feel that the architecture described goes a long way
towards it in at least two-thirds of the ways listed. This also serves to make
apparent the folly of seeking a single �curiosity� module, given how many
different functions, often originally designed with different goals in mind,
were eventually drafted in as integral to the business of being curious.
Curiosity just results from the system�s methods of learning proactively.</p>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h2>References</h2>

<p class=MsoNormal><span style='font-size:9.0pt;mso-bidi-font-size:10.0pt'>S.
Bolland, �CopyKitten: A Java-Based Implementation and Tutorial of the Copycat
Model of analogical thought�, Honours thesis, School of Information Technology,
UQ, 1997. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Carbonell, J. (1986), �Derivational analogy: a
theory of reconstructive problem-solving and expertise acquisition�, in
Michalski, Carbonell and Mitchell (ed.), <i>Machine Learning: an Artificial
Intelligence Approach, vol II</i>.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Chalmers, French and Hofstadter (1991), �High-Level
Perception, Representation and Analogy: A Critique of Artificial Intelligence
Methodology� in Hofstadter (1995).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Desai, R., �Structure-Mapping vs. High-level
Perception: Why the Fight is Not Mistaken�, in Proceedings of the 19th Annual
Conference of the Cognitive Science Society, Stanford, CA, 1997.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Evans, T., 'A program for the solution of geometric
analogy intelligence test questions' in Minsky (1968), <i>Semantic information
processing.<o:p></o:p></i></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><i><span lang=EN-US
style='font-size:9.0pt;mso-bidi-font-size:10.0pt;mso-fareast-font-family:"Arial Unicode MS";
mso-bidi-font-family:"Arial Unicode MS";display:none;mso-hide:all;mso-ansi-language:
EN-US'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></i></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";display:none;
mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Feldman, J. (2002), �Simplicity and complexity in
human concept learning� 2002 George Miller Award Address, The General
Psychologist.</span><span style='font-size:9.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS"'><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Fass, D. and Feldman, J. (2002), �Categorization
under complexity: a unified MDL account of human learning of regular and
irregular categories�, in Advances in Neural Information Processing Systems.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";display:none;
mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";display:none;
mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>French, R. M. (2002). The Computational Modeling of
Analogy-Making. Trends in Cognitive Sciences, 6(5), 200-205.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Gentner &amp; Markman (1997), in American
Psychologist, vol 52, no. 1, pp 45-56.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Hankerson et al. (2003), <i>Introduction to
information theory and data compression.</i></span><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;mso-fareast-font-family:"Arial Unicode MS";
mso-bidi-font-family:"Arial Unicode MS"'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-top:4.0pt;text-align:left'><span
style='font-size:9.0pt;mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";
mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
display:none;mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>D. Hofstadter, (1995). Fluid Concepts and Creative
analogies: computer Models of the Fundamental Mechanisms of Thought. NY: Basic
Books. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;color:black'>- (1995). A Review of Mental Leaps:
Analogy in Creative Thought.&quot; AI Magazine, Fall 1995, 75-80.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;color:black'>Holland, J. H. (1975, reprinted 1992), <i>Adaptation
in natural and artificial systems</i>, MIT Press.</span><span style='font-size:
9.0pt;mso-bidi-font-size:10.0pt'><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Kelly, K. (1995), �By analogy�, in Wired, issue
3.11, November.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Kolodner, in Leake (1996), ch 2.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Koza 1997 � for Encyclopedia of Computer Science and
Technology, Kent &amp; Williams (ed.).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Langley, Simon, Bradshaw &amp; Zytkow (1987), <i>Scientific
discovery: computational explorations of the creative processes</i></span><span
lang=EN-US style='font-size:9.0pt;mso-bidi-font-size:10.0pt;mso-fareast-font-family:
"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS";display:none;
mso-hide:all;mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";display:none;
mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;color:blue'>.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Leake, D. (1996), ed., <i>Case-based reasoning.</i></span><i><span
style='font-size:9.0pt;mso-bidi-font-size:10.0pt;mso-fareast-font-family:"Arial Unicode MS";
mso-bidi-font-family:"Arial Unicode MS"'><o:p></o:p></span></i></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";display:none;
mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Marshall, J. B. (1999), <i>Metacat: a self-watching
cognitive architecture for analogy-making and high-level perception</i>, PhD
thesis, Indiana University, Bloomington.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Minsky, <i>The Emotion Machine</i> (forthcoming).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>- �Why people think computers can�t�, online.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>-<span style="mso-spacerun: yes">� </span>�Jokes and
the cognitive unconscious�, online.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Mitchell, M., <i>Analogy-Making as Perception</i>,
MIT Press, 1993.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Mitchell, M., (1996), <i>An Introduction to Genetic
Algorithms</i>. Cambridge, MA: The MIT Press.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Morrison, C. &amp; Dietrich, E. (1995),
�Structure-mapping vs. High-level perception: The mistaken fight over the
explanation of analogy�, in Proceedings of the Seventeenth Annual Conference of
the Cognitive Science Society (pp. 678-682). </span><span style='font-size:
9.0pt;mso-bidi-font-size:10.0pt;mso-fareast-font-family:"Arial Unicode MS";
mso-bidi-font-family:"Arial Unicode MS"'><o:p></o:p></span></p>

<p class=MsoNormal align=left style='margin-top:4.0pt;text-align:left'><span
style='font-size:9.0pt;mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";
mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
display:none;mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Rissanen, J. (1978), �Modeling by shortest data
description�, in Automatica, 14, 465-471.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Rissannen, J. (1999), Rejoinder, in �The Computer
Journal�, vol. 42, no. 4.<i><o:p></o:p></i></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Roberts, M. (unpublished), �A cognitive manifesto�,
google �Michael Roberts Magnificat�.</span><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt;mso-fareast-font-family:"Arial Unicode MS";
mso-bidi-font-family:"Arial Unicode MS"'><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";display:none;
mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Sutton, R. and Barto, A. (2002), <i>Reinforcement
learning</i></span><span style='font-size:9.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS";
display:none;mso-hide:all'><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:12.0pt;font-family:"Arial Unicode MS";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";display:none;
mso-hide:all'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Veloso, M. �Flexible strategy learning using
analogical replay of problem-solving episodes� in Leake (1996).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Vitanyi, P. and Li, M. (2002), �Minimum description
length induction, Bayesianism and Kolmogorov complexity�, online.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt'><span style='font-size:9.0pt;
mso-bidi-font-size:10.0pt'>Winston, P. H. (1980), �Learning and reasoning by
analogy�, in CACM, vol. 23, no. 12, pg. 689.<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

<b style='mso-bidi-font-weight:normal'><span style='font-size:18.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:auto;
mso-break-type:section-break'>
</span></b>

<div class=Section3><br clear=all style='page-break-before:always'>

<h2>Figures</h2>

<h3>Figure 1 � Copycat Slipnet</h3>

<p class=MsoNormal>see attached file � �copycat slipnet organisation.pdf�</p>

<h3>Figure 2 � Copycat Workspace for the abc/xyz problem</h3>

<p class=MsoNormal><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:459pt;
 height:234.6pt'>
 <v:imagedata src="./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/image001.png"
  o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=612 height=313
src="./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/image002.jpg"
v:shapes="_x0000_i1025"><![endif]></p>

<h3>Figure 3 � Copycat Workspace on the abc/mrrjjj problem</h3>

<p class=MsoNormal><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75"
 style='width:458.4pt;height:239.4pt'>
 <v:imagedata src="./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/image003.png"
  o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=611 height=319
src="./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/image004.jpg"
v:shapes="_x0000_i1026"><![endif]></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3>Figure 4 � An example of a meta-analogy in the geometric puzzles domain
that can be seen as a meta-meta-analogy with the abc</h3>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><!--[if gte vml 1]><o:wrapblock><v:shape id="_x0000_s1028"
  type="#_x0000_t75" style='position:absolute;left:0;text-align:left;
  margin-left:0;margin-top:0;width:363.7pt;height:647.85pt;z-index:1'>
  <v:imagedata src="./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/image005.wmz"
   o:title=""/>
  <w:wrap type="topAndBottom"/>
 </v:shape><![endif]--><![if !vml]><img width=485 height=863
 src="./essay%20-%20curious%20machines,%20final%20paper%2010%20re-edit_files/image006.gif"
 v:shapes="_x0000_s1028"><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
<![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

<div style='mso-element:footnote-list'><![if !supportFootnotes]><br clear=all>

<hr align=left size=1 width="33%">

<![endif]>

<div style='mso-element:footnote' id=ftn1>

<p class=MsoFootnoteText><a style='mso-footnote-id:ftn1' href="#_ftnref1"
name="_ftn1" title=""><span class=MsoFootnoteReference><span style='mso-special-character:
footnote'><![if !supportFootnotes]>[1]<![endif]></span></span></a> Although
Hofstadter avoids the word �search� in the context of thinking because of the
connotations of formal, efficient techniques for searching well-defined spaces,
that he rejects [Kelly, 1995].</p>

</div>

<div style='mso-element:footnote' id=ftn2>

<p class=MsoFootnoteText><a style='mso-footnote-id:ftn2' href="#_ftnref2"
name="_ftn2" title=""><span class=MsoFootnoteReference><span style='mso-special-character:
footnote'><![if !supportFootnotes]>[2]<![endif]></span></span></a> Copycat�s
temperature parameter ranges from 0-100. We need to calculate Copycat�s
satisfaction as <i>100 � temperature</i>, since a lower Copycat temperature
signifies a higher satisfaction.</p>

</div>

</div>

</body>

</html>
