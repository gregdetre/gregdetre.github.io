<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List
href="./lecture%20-%20cs187%20computational%20linguistics%20021004_files/filelist.xml">
<title>Title</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Greg Detre</o:Author>
  <o:LastAuthor>Greg Detre</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>165</o:TotalTime>
  <o:Created>2003-07-02T01:03:00Z</o:Created>
  <o:LastSaved>2003-07-02T01:03:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>832</o:Words>
  <o:Characters>4748</o:Characters>
  <o:Company>-</o:Company>
  <o:Lines>39</o:Lines>
  <o:Paragraphs>9</o:Paragraphs>
  <o:CharactersWithSpaces>5830</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DrawingGridHorizontalSpacing>4.5 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>12.25 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:Compatibility>
   <w:WW6BorderRules/>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:"Book Antiqua";
	panose-1:2 4 6 2 5 3 5 3 3 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:553679495 -2147483648 8 0 66047 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	text-align:center;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:purple;
	mso-font-kerning:14.0pt;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h2
	{mso-style-next:Normal;
	margin-top:16.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:navy;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h3
	{mso-style-next:Normal;
	margin-top:16.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	tab-stops:right 451.45pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:green;
	font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h4
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:justify;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin-top:15.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:maroon;
	font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h6
	{mso-style-parent:"Heading 5";
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:6;
	font-size:11.0pt;
	font-family:"Times New Roman";
	color:olive;
	font-weight:normal;
	mso-bidi-font-weight:bold;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-parent:"Heading 1";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	tab-stops:.75in right 451.45pt;
	font-size:11.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-variant:small-caps;
	color:purple;
	mso-font-kerning:14.0pt;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-parent:"Heading 2";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:10.1pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	tab-stops:right 451.3pt;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:navy;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-parent:"TOC 2";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:20.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	tab-stops:right 451.45pt;
	font-size:9.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:teal;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-update:auto;
	mso-style-parent:"TOC 3";
	mso-style-next:Normal;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:35.7pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	tab-stops:right 451.45pt;
	font-size:7.5pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:maroon;
	mso-bidi-font-weight:bold;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	tab-stops:center 239.75pt right 6.65in;
	font-size:11.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoDate, li.MsoDate, div.MsoDate
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:right;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	background:navy;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Tahoma;
	mso-fareast-font-family:"Times New Roman";}
p.Section, li.Section, div.Section
	{mso-style-name:Section;
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;
	mso-bidi-font-weight:normal;}
p.Heading0, li.Heading0, div.Heading0
	{mso-style-name:"Heading 0";
	mso-style-parent:"Heading 1";
	margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	text-align:center;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	border:none;
	mso-border-alt:solid windowtext .5pt;
	padding:0in;
	mso-padding-alt:1.0pt 4.0pt 1.0pt 4.0pt;
	font-size:16.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Book Antiqua";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	font-variant:small-caps;
	color:purple;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:.95in .95in .95in .95in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:1746143482;
	mso-list-type:simple;
	mso-list-template-ids:-719658964;}
@list l0:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
</head>

<body lang=EN-GB style='tab-interval:17.85pt'>

<div class=Section1>

<h1>Lecture ï¿½ CS187 Computational linguistics</h1>

<p class=MsoNormal align=right style='text-align:right'>Greg Detre</p>

<p class=MsoNormal align=right style='margin-top:2.0pt;text-align:right'><span
lang=EN-US style='mso-ansi-language:EN-US'>@14:40 on Friday, October 04, 2002<o:p></o:p></span></p>

<p class=MsoNormal align=right style='margin-top:2.0pt;text-align:right'><span
lang=EN-US style='mso-ansi-language:EN-US'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>the optional end question has not been posed to the CL
community</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Problems</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>verb subcategorisation</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>e.g. ï¿½frog metï¿½, ï¿½frog slept a
cookieï¿½</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>agreement</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>ï¿½frog bake a cakeï¿½, ï¿½they bakes a
cakeï¿½</p>

<p class=MsoNormal>Chomsky argued: you canï¿½t have cross-talk in a CFG ï¿½ thatï¿½s
why they call them context-<i>free</i></p>

<p class=MsoNormal style='margin-left:17.85pt'>so how do you deal with these
problems? letï¿½s assume that it is CF, then what technical means should we add
to CF?</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>one solution is just to make the
non-terminal categories more finely-grained</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>quantify (e.g. (forAll <i>num</i>) S <span
style='font-size:10.0pt;font-family:Symbol;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>ï¿½</span></span>
NP<sub>num</sub> VP<sub>num</sub>)</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>this is just an abbreviation for
enumerating the finite set of all expansions ï¿½ not formally more powerful, but
potentially exponentially more succinct</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>metarules</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>if you chain together [[V NP] (PP)]
successively ï¿½ need to be able to reason about the subcategories in your
metalanguage(???)</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>all of these ideas depend on the idea
that non-terminals cannot be atomic ï¿½ theyï¿½re structured not primitive</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>could you use statistical methods to
induce what the rules of the grammar must be?</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Tricky constructions (discussed last week)</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>ï¿½Who ate the cookies?ï¿½</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>ï¿½Frog did bake her some cookies.ï¿½</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>ï¿½What did Frog eat?ï¿½</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>you canï¿½t say ï¿½What did Frog sleep?ï¿½
ï¿½ even though thereï¿½s no NP after the verb, as usual, the same constraints
apply to wh-constructions ï¿½ how are you going to do that with a CFG?</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>you could employ a set of string
rewrite rules that operate on pseudo-sentences generated by a CFG (e.g. ï¿½Did
Frog eat what?ï¿½)</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>subjacency violation (e.g. ï¿½Frog said
that who went to the storeï¿½) ï¿½ need something more sophisticated that rewrites
the rules/trees, not just the strings</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>transformational grammar: the base
grammar builds the deep structure, and the transformations turn it into the
surface structure</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>does this correspond to the way that
we acquire language, that we first start to learn the things that have fewest
transformationsï¿½</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>ï¿½Syntactic argumentation and the
structure of Englishï¿½ ï¿½ David Perlmutter</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>great if you want to learn
linguistics without 112a and 112b ï¿½ teaches structure of English as well as the
methods by which linguists have reached them</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>Prolog</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>designed for the niche market of NLP</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>the general idea is: write down what
you want to know, and let the system figure it out</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>P<sub>1</sub> ^ P<sub>2</sub> ^ P<sub>k</sub>
<span style='font-size:10.0pt;font-family:Symbol;mso-ascii-font-family:"Times New Roman";
mso-hansi-font-family:"Times New Roman";mso-char-type:symbol;mso-symbol-font-family:
Symbol'><span style='mso-char-type:symbol;mso-symbol-font-family:Symbol'>ï¿½</span></span>
N<sub>1</sub> (u N<sub>2</sub> u N<sub>k</sub>)</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>N<sub>1</sub> :- P<sub>1</sub>, ï¿½ , P<sub>k</sub></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>theorem-proving with definite
clauses is much easier</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>you can still write infinite loops</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>measure speed of Prolog systems in
terms of logical inferences per second (rather than floating point operations
per second) ï¿½ original Prolog systems managed a handful per second ï¿½ first
efficient Prolog compiler in the late 70s/80, which could do thousands of
logical inferences per second ï¿½ millions nowadays</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>a term (const | var | fn(term, ï¿½
term)) is the Prolog equivalent of a data structure</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>a list can be represented as a tree
ï¿½.(1,.(2,.(3, [])))ï¿½ ï¿½ this is the same idea as Lisp (where you use cons
instead of .)</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>.(1,.(2,X)) ï¿½ for when you know only
the first two elements of the list</p>

<p class=MsoNormal style='margin-left:17.85pt'>resolution ï¿½ negate what you
want to prove</p>

<p class=MsoNormal style='margin-left:17.85pt'>concatenation</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>concat( L, R, LR ).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>concat( [], R, R ).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'><s>concat( [A], R, [A|R] ).</s><span
style='mso-tab-count:1'>ï¿½ï¿½ï¿½ï¿½ </span>this is entailed by preceding + succeeding
statements</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>concat([First<span lang=EN-US
style='mso-ansi-language:EN-US'> | Rest], List, [First | RestList]) :-<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt;text-indent:17.85pt'><span lang=EN-US
style='mso-ansi-language:EN-US'>concat (Rest, List, RestList).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>itï¿½s completely deterministic</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>for instance, itï¿½ll give you all the
possibilities for:</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>concat(X, Y, [1, 2, 3, 4])</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:17.85pt'>the member predicate</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>memb(X,[X|_]).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>memb(X,[_|L]):-</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>memb(X,L).</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:17.85pt'>the reverse predicate</p>

<p class=MsoNormal style='margin-left:35.7pt'>Dev</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>reverse([],[]).</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>reverse([X|Y],[Z|X]) :-</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>reverse([Y],[Z]).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>Nora</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>reverse([],[]).</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>reverse([X|Resta],[Restb|X]) :-</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>reverse(Resta,Restb).</p>

<p class=MsoNormal style='margin-left:35.7pt'>Noam</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>revappend([],L,L</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>ï¿½</p>

<p class=MsoNormal style='margin-left:35.7pt'>Shieber1</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>rev([],[]).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>rev([X|Y1], Res) :-</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>rev(Y1, Y2),</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>concat(Y2, [X], Res).</p>

<p class=MsoNormal style='margin-left:35.7pt'>Shieber2</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>rev(X, Y) :-</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>rev(X, Y, []).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>rev([], Y, Y).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>rev([A|RestA], Y, Z) :-</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>rev(RestA, Y, [A|Z]).</p>

<p class=MsoNormal style='margin-left:53.55pt'>when you try rev(X, [3,2,1]),
then the program goes into an infinite loop after it gets the first match
(because it doesnï¿½t know that X and Y should be of equal length)</p>

<p class=MsoNormal style='margin-left:17.85pt'>the information from the callee
and the caller flows in both directions in Prolog (unlike C and Lisp)</p>

<p class=MsoNormal style='margin-left:17.85pt'>any language in which you canï¿½t
write an infinite loop is not an interesting language (Churchï¿½s thesis)</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-left:17.85pt'>:- op(1200, xfx, ï¿½==&gt;ï¿½)<span
style='mso-tab-count:1'>ï¿½ï¿½ï¿½ï¿½ï¿½ </span>defines an operator???</p>

<p class=MsoNormal style='margin-left:17.85pt'>ensure_loaded ï¿½ loads a file</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>parsing</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>ï¿½???</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:17.85pt;margin-bottom:.0001pt'>encode string position in terms of
the list of things that follow it (ending with the empty list)</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>e.g. <span style='font-size:11.0pt;
mso-bidi-font-size:10.0pt;font-family:"Courier New"'>connects(a, [a, cookie],
[cookie]).</span></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>in general: <span style='font-size:
11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
"Times New Roman"'>connects(W, [W|Rest], Rest).</span></p>

<p class=MsoNormal style='margin-left:17.85pt'>now you can ask things like:</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>s([frog, baked, every, cookie],[]).</p>

<p class=MsoNormal style='margin-left:17.85pt'>define a unary <i>s</i>, so you
donï¿½t have to have the empty list at the end</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>s(String) :- s(String,[]).</p>

<p class=MsoNormal style='margin-left:17.85pt'>then you can do things like:</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>s([X,met,Y]).</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>to get: X = frog, Y = toad, and
permutations thereof</p>

<p class=MsoNormal style='margin-left:17.85pt'>write an interpreter for an
arbitrary grammar</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>rule(s, [np, vp] ).</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>s <span style='font-size:10.0pt'>==&gt;</span>
[np, vp].</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'>need to write some code that would
interpret those clauses</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>parse(Sym, P0, P, T).<span
style='mso-tab-count:2'>ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ </span>some symbol, string, tree output</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>parse(W, P0, P) :-</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>connects(W, P0, P).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>parse(N, P0, P) :-</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>N ==&gt; RHS, </p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>parse(RHS, P0, P).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>but then youï¿½ve got RHS (which is a
list) rather than a symbol (Sym), soï¿½</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>parse([], P0, P0).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>parse[Sym|Rest], P0, P) :-</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>parse(Sym, P0, P1)</p>

<p class=MsoNormal style='margin-top:2.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'>parse(Rest, P1, P).</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:71.4pt;margin-bottom:.0001pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>ï¿½???</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:53.55pt;margin-bottom:.0001pt'>can parse any CFG in CFG notation
with just a few lines of Prolog code</p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal style='margin-top:4.0pt;margin-right:0in;margin-bottom:0in;
margin-left:35.7pt;margin-bottom:.0001pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h2>Admin</h2>

<p class=MsoNormal>ask if lectures will be online</p>

<h2>Questions</h2>

<p class=MsoNormal>optional question???</p>

<p class=MsoNormal>what can you say in second order formal logic that you canï¿½t
in first-order???</p>

<p class=MsoNormal>is a definite clause the same as a Horn clause???</p>

<p class=MsoNormal>in a definite/Horn clause, can you swap round the Ps and
Ns???</p>

<p class=MsoNormal>why do you use the underscore (the anonymous variable)
instead of just a bunch of different variables???</p>

<p class=MsoNormal>what type of language/grammar wouldnï¿½t be able to write an
infinite loop??? can a regular language go into an infinite loop???</p>

<p class=MsoNormal>connects, P, P0, P1???</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

</div>

</body>

</html>
